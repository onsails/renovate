{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/workers/branch/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { DateTime } from 'luxon';\nimport minimatch from 'minimatch';\nimport { RenovateConfig } from '../../config';\nimport {\n  MANAGER_LOCKFILE_ERROR,\n  PLATFORM_AUTHENTICATION_ERROR,\n  PLATFORM_BAD_CREDENTIALS,\n  PLATFORM_INTEGRATION_UNAUTHORIZED,\n  PLATFORM_RATE_LIMIT_EXCEEDED,\n  REPOSITORY_CHANGED,\n  SYSTEM_INSUFFICIENT_DISK_SPACE,\n  WORKER_FILE_UPDATE_FAILED,\n} from '../../constants/error-messages';\nimport { addMeta, logger, removeMeta } from '../../logger';\nimport { getAdditionalFiles } from '../../manager/npm/post-update';\nimport { Pr, platform } from '../../platform';\nimport { BranchStatus, PrState } from '../../types';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { emojify } from '../../util/emoji';\nimport { exec } from '../../util/exec';\nimport { readLocalFile, writeLocalFile } from '../../util/fs';\nimport {\n  checkoutBranch,\n  deleteBranch,\n  getRepoStatus,\n  branchExists as gitBranchExists,\n  isBranchModified,\n} from '../../util/git';\nimport { regEx } from '../../util/regex';\nimport * as template from '../../util/template';\nimport { BranchConfig, PrResult, ProcessBranchResult } from '../common';\nimport { Limit, isLimitReached } from '../global/limits';\nimport { checkAutoMerge, ensurePr, getPlatformPrOptions } from '../pr';\nimport { tryBranchAutomerge } from './automerge';\nimport { prAlreadyExisted } from './check-existing';\nimport { commitFilesToBranch } from './commit';\nimport { getUpdatedPackageFiles } from './get-updated';\nimport { shouldReuseExistingBranch } from './reuse';\nimport { isScheduledNow } from './schedule';\nimport { setStability } from './status-checks';\n\nfunction rebaseCheck(config: RenovateConfig, branchPr: Pr): boolean {\n  const titleRebase = branchPr.title?.startsWith('rebase!');\n  const labelRebase = branchPr.labels?.includes(config.rebaseLabel);\n  const prRebaseChecked = branchPr.body?.includes(\n    `- [x] <!-- rebase-check -->`\n  );\n\n  return titleRebase || labelRebase || prRebaseChecked;\n}\n\nconst rebasingRegex = /\\*\\*Rebasing\\*\\*: .*/;\n\nasync function deleteBranchSilently(branchName: string): Promise<void> {\n  try {\n    await deleteBranch(branchName);\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ branchName, err }, 'Branch auto-remove failed');\n  }\n}\n\nexport async function processBranch(\n  branchConfig: BranchConfig\n): Promise<ProcessBranchResult> {\n  const config: BranchConfig = { ...branchConfig };\n  const dependencies = config.upgrades\n    .map((upgrade) => upgrade.depName)\n    .filter((v) => v) // remove nulls (happens for lock file maintenance)\n    .filter((value, i, list) => list.indexOf(value) === i); // remove duplicates\n  logger.debug(\n    { dependencies },\n    `processBranch with ${branchConfig.upgrades.length} upgrades`\n  );\n  logger.trace({ config }, 'branch config');\n  await checkoutBranch(config.baseBranch);\n  const branchExists = gitBranchExists(config.branchName);\n  const branchPr = await platform.getBranchPr(config.branchName);\n  logger.debug(`branchExists=${branchExists}`);\n  const dependencyDashboardCheck = (config.dependencyDashboardChecks || {})[\n    config.branchName\n  ];\n  // istanbul ignore if\n  if (dependencyDashboardCheck) {\n    logger.debug(\n      'Branch has been checked in Dependency Dashboard: ' +\n        dependencyDashboardCheck\n    );\n  }\n  if (branchPr) {\n    config.rebaseRequested = rebaseCheck(config, branchPr);\n    logger.debug(`Branch pr rebase requested: ${config.rebaseRequested}`);\n  }\n  try {\n    logger.debug(`Branch has ${dependencies.length} upgrade(s)`);\n\n    // Check if branch already existed\n    const existingPr = branchPr ? undefined : await prAlreadyExisted(config);\n    if (existingPr && !dependencyDashboardCheck) {\n      logger.debug(\n        { prTitle: config.prTitle },\n        'Closed PR already exists. Skipping branch.'\n      );\n      if (existingPr.state === PrState.Closed) {\n        const topic = `Renovate Ignore Notification`;\n        let content;\n        if (config.updateType === 'major') {\n          content = `As this PR has been closed unmerged, Renovate will ignore this upgrade and you will not receive PRs for *any* future ${config.newMajor}.x releases. However, if you upgrade to ${config.newMajor}.x manually then Renovate will then reenable updates for minor and patch updates automatically.`;\n        } else if (config.updateType === 'digest') {\n          content = `As this PR has been closed unmerged, Renovate will ignore this upgrade updateType and you will not receive PRs for *any* future ${config.depName}:${config.currentValue} digest updates. Digest updates will resume if you update the specified tag at any time.`;\n        } else {\n          content = `As this PR has been closed unmerged, Renovate will now ignore this update (${config.newValue}). You will still receive a PR once a newer version is released, so if you wish to permanently ignore this dependency, please add it to the \\`ignoreDeps\\` array of your renovate config.`;\n        }\n        content +=\n          '\\n\\nIf this PR was closed by mistake or you changed your mind, you can simply rename this PR and you will soon get a fresh replacement PR opened.';\n        if (!config.suppressNotifications.includes('prIgnoreNotification')) {\n          if (config.dryRun) {\n            logger.info(\n              `DRY-RUN: Would ensure closed PR comment in PR #${existingPr.number}`\n            );\n          } else {\n            await platform.ensureComment({\n              number: existingPr.number,\n              topic,\n              content,\n            });\n          }\n        }\n        if (branchExists) {\n          if (config.dryRun) {\n            logger.info('DRY-RUN: Would delete branch ' + config.branchName);\n          } else {\n            await deleteBranch(config.branchName);\n          }\n        }\n      } else if (existingPr.state === PrState.Merged) {\n        logger.debug(\n          { pr: existingPr.number },\n          'Merged PR is blocking this branch'\n        );\n      }\n      return ProcessBranchResult.AlreadyExisted;\n    }\n    // istanbul ignore if\n    if (!branchExists && config.dependencyDashboardApproval) {\n      if (dependencyDashboardCheck) {\n        logger.debug(`Branch ${config.branchName} is approved for creation`);\n      } else {\n        logger.debug(`Branch ${config.branchName} needs approval`);\n        return ProcessBranchResult.NeedsApproval;\n      }\n    }\n    if (\n      !branchExists &&\n      isLimitReached(Limit.Branches) &&\n      !dependencyDashboardCheck &&\n      !config.vulnerabilityAlert\n    ) {\n      logger.debug('Reached branch limit - skipping branch creation');\n      return ProcessBranchResult.BranchLimitReached;\n    }\n    if (\n      isLimitReached(Limit.Commits) &&\n      !dependencyDashboardCheck &&\n      !config.vulnerabilityAlert\n    ) {\n      logger.debug('Reached commits limit - skipping branch');\n      return ProcessBranchResult.CommitLimitReached;\n    }\n    if (branchExists) {\n      logger.debug('Checking if PR has been edited');\n      const branchIsModified = await isBranchModified(config.branchName);\n      if (branchPr) {\n        logger.debug('Found existing branch PR');\n        if (branchPr.state !== PrState.Open) {\n          logger.debug(\n            'PR has been closed or merged since this run started - aborting'\n          );\n          throw new Error(REPOSITORY_CHANGED);\n        }\n        if (\n          branchIsModified ||\n          (branchPr.targetBranch &&\n            branchPr.targetBranch !== branchConfig.baseBranch)\n        ) {\n          logger.debug({ prNo: branchPr.number }, 'PR has been edited');\n          if (dependencyDashboardCheck || config.rebaseRequested) {\n            logger.debug('Manual rebase has been requested for PR');\n          } else {\n            const newBody = branchPr.body?.replace(\n              rebasingRegex,\n              '**Rebasing**: Renovate will not automatically rebase this PR, because other commits have been found.'\n            );\n            if (newBody !== branchPr.body) {\n              logger.debug(\n                'Updating existing PR to indicate that rebasing is not possible'\n              );\n              await platform.updatePr({\n                number: branchPr.number,\n                prTitle: branchPr.title,\n                prBody: newBody,\n                platformOptions: getPlatformPrOptions(config),\n              });\n            }\n            return ProcessBranchResult.PrEdited;\n          }\n        }\n      } else if (branchIsModified) {\n        logger.debug('Branch has been edited');\n        return ProcessBranchResult.PrEdited;\n      }\n    }\n\n    // Check schedule\n    config.isScheduledNow = isScheduledNow(config);\n    if (!config.isScheduledNow && !dependencyDashboardCheck) {\n      if (!branchExists) {\n        logger.debug('Skipping branch creation as not within schedule');\n        return ProcessBranchResult.NotScheduled;\n      }\n      if (config.updateNotScheduled === false && !config.rebaseRequested) {\n        logger.debug('Skipping branch update as not within schedule');\n        return ProcessBranchResult.NotScheduled;\n      }\n      // istanbul ignore if\n      if (!branchPr) {\n        logger.debug('Skipping PR creation out of schedule');\n        return ProcessBranchResult.NotScheduled;\n      }\n      logger.debug(\n        'Branch + PR exists but is not scheduled -- will update if necessary'\n      );\n    }\n\n    if (\n      config.upgrades.some(\n        (upgrade) => upgrade.stabilityDays && upgrade.releaseTimestamp\n      )\n    ) {\n      // Only set a stability status check if one or more of the updates contain\n      // both a stabilityDays setting and a releaseTimestamp\n      config.stabilityStatus = BranchStatus.green;\n      // Default to 'success' but set 'pending' if any update is pending\n      const oneDay = 24 * 60 * 60 * 1000;\n      for (const upgrade of config.upgrades) {\n        if (upgrade.stabilityDays && upgrade.releaseTimestamp) {\n          const daysElapsed = Math.floor(\n            (new Date().getTime() -\n              new Date(upgrade.releaseTimestamp).getTime()) /\n              oneDay\n          );\n          if (\n            !dependencyDashboardCheck &&\n            daysElapsed < upgrade.stabilityDays\n          ) {\n            logger.debug(\n              {\n                depName: upgrade.depName,\n                daysElapsed,\n                stabilityDays: upgrade.stabilityDays,\n              },\n              'Update has not passed stability days'\n            );\n            config.stabilityStatus = BranchStatus.yellow;\n          }\n        }\n      }\n      // Don't create a branch if we know it will be status ProcessBranchResult.Pending\n      if (\n        !dependencyDashboardCheck &&\n        !branchExists &&\n        config.stabilityStatus === BranchStatus.yellow &&\n        ['not-pending', 'status-success'].includes(config.prCreation)\n      ) {\n        logger.debug('Skipping branch creation due to stability days not met');\n        return ProcessBranchResult.Pending;\n      }\n    }\n\n    // istanbul ignore if\n    if (\n      dependencyDashboardCheck === 'rebase' ||\n      config.dependencyDashboardRebaseAllOpen\n    ) {\n      logger.debug('Manual rebase requested via Dependency Dashboard');\n      config.reuseExistingBranch = false;\n    } else {\n      Object.assign(config, await shouldReuseExistingBranch(config));\n    }\n    logger.debug(`Using reuseExistingBranch: ${config.reuseExistingBranch}`);\n    const res = await getUpdatedPackageFiles(config);\n    // istanbul ignore if\n    if (res.artifactErrors && config.artifactErrors) {\n      res.artifactErrors = config.artifactErrors.concat(res.artifactErrors);\n    }\n    Object.assign(config, res);\n    if (config.updatedPackageFiles?.length) {\n      logger.debug(\n        `Updated ${config.updatedPackageFiles.length} package files`\n      );\n    } else {\n      logger.debug('No package files need updating');\n    }\n    const additionalFiles = await getAdditionalFiles(\n      config,\n      branchConfig.packageFiles\n    );\n    config.artifactErrors = (config.artifactErrors || []).concat(\n      additionalFiles.artifactErrors\n    );\n    config.updatedArtifacts = (config.updatedArtifacts || []).concat(\n      additionalFiles.updatedArtifacts\n    );\n    if (config.updatedArtifacts?.length) {\n      logger.debug(\n        {\n          updatedArtifacts: config.updatedArtifacts.map((f) =>\n            f.name === '|delete|' ? `${String(f.contents)} (delete)` : f.name\n          ),\n        },\n        `Updated ${config.updatedArtifacts.length} lock files`\n      );\n    } else {\n      logger.debug('No updated lock files in branch');\n    }\n\n    if (\n      /* Only run post-upgrade tasks if there are changes to package files... */\n      (config.updatedPackageFiles?.length > 0 ||\n        /* ... or changes to artifacts */\n        config.updatedArtifacts?.length > 0) &&\n      global.trustLevel === 'high' &&\n      is.nonEmptyArray(config.allowedPostUpgradeCommands)\n    ) {\n      for (const upgrade of config.upgrades) {\n        addMeta({ dep: upgrade.depName });\n        logger.trace(\n          {\n            tasks: upgrade.postUpgradeTasks,\n            allowedCommands: config.allowedPostUpgradeCommands,\n          },\n          'Checking for post-upgrade tasks'\n        );\n        const commands = upgrade.postUpgradeTasks.commands || [];\n        const fileFilters = upgrade.postUpgradeTasks.fileFilters || [];\n\n        if (is.nonEmptyArray(commands)) {\n          // Persist updated files in file system so any executed commands can see them\n          for (const file of config.updatedPackageFiles.concat(\n            config.updatedArtifacts\n          )) {\n            if (file.name !== '|delete|') {\n              let contents;\n              if (typeof file.contents === 'string') {\n                contents = Buffer.from(file.contents);\n              } else {\n                contents = file.contents;\n              }\n              await writeLocalFile(file.name, contents);\n            }\n          }\n\n          for (const cmd of commands) {\n            if (\n              !config.allowedPostUpgradeCommands.some((pattern) =>\n                regEx(pattern).test(cmd)\n              )\n            ) {\n              logger.warn(\n                {\n                  cmd,\n                  allowedPostUpgradeCommands: config.allowedPostUpgradeCommands,\n                },\n                'Post-upgrade task did not match any on allowed list'\n              );\n            } else {\n              const compiledCmd = config.allowPostUpgradeCommandTemplating\n                ? template.compile(cmd, upgrade)\n                : cmd;\n\n              logger.debug({ cmd: compiledCmd }, 'Executing post-upgrade task');\n\n              const execResult = await exec(compiledCmd, {\n                cwd: config.localDir,\n              });\n\n              logger.debug(\n                { cmd: compiledCmd, ...execResult },\n                'Executed post-upgrade task'\n              );\n            }\n          }\n\n          const status = await getRepoStatus();\n\n          for (const relativePath of status.modified.concat(status.not_added)) {\n            for (const pattern of fileFilters) {\n              if (minimatch(relativePath, pattern)) {\n                logger.debug(\n                  { file: relativePath, pattern },\n                  'Post-upgrade file saved'\n                );\n                const existingContent = await readLocalFile(relativePath);\n                const existingUpdatedArtifacts = config.updatedArtifacts.find(\n                  (ua) => ua.name === relativePath\n                );\n                if (existingUpdatedArtifacts) {\n                  existingUpdatedArtifacts.contents = existingContent;\n                } else {\n                  config.updatedArtifacts.push({\n                    name: relativePath,\n                    contents: existingContent,\n                  });\n                }\n                // If the file is deleted by a previous post-update command, remove the deletion from updatedArtifacts\n                config.updatedArtifacts = config.updatedArtifacts.filter(\n                  (ua) => ua.name !== '|delete|' || ua.contents !== relativePath\n                );\n              }\n            }\n          }\n\n          for (const relativePath of status.deleted || []) {\n            for (const pattern of fileFilters) {\n              if (minimatch(relativePath, pattern)) {\n                logger.debug(\n                  { file: relativePath, pattern },\n                  'Post-upgrade file removed'\n                );\n                config.updatedArtifacts.push({\n                  name: '|delete|',\n                  contents: relativePath,\n                });\n                // If the file is created or modified by a previous post-update command, remove the modification from updatedArtifacts\n                config.updatedArtifacts = config.updatedArtifacts.filter(\n                  (ua) => ua.name !== relativePath\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    removeMeta(['dep']);\n\n    if (config.artifactErrors?.length) {\n      if (config.releaseTimestamp) {\n        logger.debug(`Branch timestamp: ` + config.releaseTimestamp);\n        const releaseTimestamp = DateTime.fromISO(config.releaseTimestamp);\n        if (releaseTimestamp.plus({ hours: 2 }) < DateTime.local()) {\n          logger.debug(\n            'PR is older than 2 hours, raise PR with lock file errors'\n          );\n        } else if (branchExists) {\n          logger.debug(\n            'PR is less than 2 hours old but branchExists so updating anyway'\n          );\n        } else {\n          logger.debug(\n            'PR is less than 2 hours old - raise error instead of PR'\n          );\n          throw new Error(MANAGER_LOCKFILE_ERROR);\n        }\n      } else {\n        logger.debug('PR has no releaseTimestamp');\n      }\n    }\n    config.forceCommit =\n      !!dependencyDashboardCheck ||\n      config.rebaseRequested ||\n      branchPr?.isConflicted;\n    const commitSha = await commitFilesToBranch(config);\n    // istanbul ignore if\n    if (branchPr && platform.refreshPr) {\n      await platform.refreshPr(branchPr.number);\n    }\n    if (!commitSha && !branchExists) {\n      return ProcessBranchResult.NoWork;\n    }\n    if (commitSha) {\n      const action = branchExists ? 'updated' : 'created';\n      logger.info({ commitSha }, `Branch ${action}`);\n    }\n    // Set branch statuses\n    await setStability(config);\n\n    // break if we pushed a new commit because status check are pretty sure pending but maybe not reported yet\n    if (\n      !dependencyDashboardCheck &&\n      !config.rebaseRequested &&\n      commitSha &&\n      (config.requiredStatusChecks?.length || config.prCreation !== 'immediate')\n    ) {\n      logger.debug({ commitSha }, `Branch status pending`);\n      return ProcessBranchResult.Pending;\n    }\n\n    // Try to automerge branch and finish if successful, but only if branch already existed before this run\n    if (branchExists || !config.requiredStatusChecks) {\n      const mergeStatus = await tryBranchAutomerge(config);\n      logger.debug(`mergeStatus=${mergeStatus}`);\n      if (mergeStatus === 'automerged') {\n        await deleteBranchSilently(config.branchName);\n        logger.debug('Branch is automerged - returning');\n        return ProcessBranchResult.Automerged;\n      }\n      if (\n        mergeStatus === 'automerge aborted - PR exists' ||\n        mergeStatus === 'branch status error' ||\n        mergeStatus === 'failed'\n      ) {\n        logger.debug({ mergeStatus }, 'Branch automerge not possible');\n        config.forcePr = true;\n        config.branchAutomergeFailureMessage = mergeStatus;\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    if (err.message === PLATFORM_RATE_LIMIT_EXCEEDED) {\n      logger.debug('Passing rate-limit-exceeded error up');\n      throw err;\n    }\n    if (err.message === REPOSITORY_CHANGED) {\n      logger.debug('Passing repository-changed error up');\n      throw err;\n    }\n    if (err.message?.startsWith('remote: Invalid username or password')) {\n      logger.debug('Throwing bad credentials');\n      throw new Error(PLATFORM_BAD_CREDENTIALS);\n    }\n    if (\n      err.message?.startsWith(\n        'ssh_exchange_identification: Connection closed by remote host'\n      )\n    ) {\n      logger.debug('Throwing bad credentials');\n      throw new Error(PLATFORM_BAD_CREDENTIALS);\n    }\n    if (err.message === PLATFORM_BAD_CREDENTIALS) {\n      logger.debug('Passing bad-credentials error up');\n      throw err;\n    }\n    if (err.message === PLATFORM_INTEGRATION_UNAUTHORIZED) {\n      logger.debug('Passing integration-unauthorized error up');\n      throw err;\n    }\n    if (err.message === MANAGER_LOCKFILE_ERROR) {\n      logger.debug('Passing lockfile-error up');\n      throw err;\n    }\n    if (err.message?.includes('space left on device')) {\n      throw new Error(SYSTEM_INSUFFICIENT_DISK_SPACE);\n    }\n    if (err.message === SYSTEM_INSUFFICIENT_DISK_SPACE) {\n      logger.debug('Passing disk-space error up');\n      throw err;\n    }\n    if (err.message.startsWith('Resource not accessible by integration')) {\n      logger.debug('Passing 403 error up');\n      throw err;\n    }\n    if (err.message === WORKER_FILE_UPDATE_FAILED) {\n      logger.warn('Error updating branch: update failure');\n    } else if (err.message.startsWith('bundler-')) {\n      // we have already warned inside the bundler artifacts error handling, so just return\n      return ProcessBranchResult.Error;\n    } else if (\n      err.messagee &&\n      err.message.includes('fatal: Authentication failed')\n    ) {\n      throw new Error(PLATFORM_AUTHENTICATION_ERROR);\n    } else if (err.message?.includes('fatal: bad revision')) {\n      logger.debug({ err }, 'Aborting job due to bad revision error');\n      throw new Error(REPOSITORY_CHANGED);\n    } else if (!(err instanceof ExternalHostError)) {\n      logger.error({ err }, `Error updating branch: ${String(err.message)}`);\n    }\n    // Don't throw here - we don't want to stop the other renovations\n    return ProcessBranchResult.Error;\n  }\n  try {\n    logger.debug('Ensuring PR');\n    logger.debug(\n      `There are ${config.errors.length} errors and ${config.warnings.length} warnings`\n    );\n    const { prResult: result, pr } = await ensurePr(config);\n    if (result === PrResult.LimitReached) {\n      logger.debug('Reached PR limit - skipping PR creation');\n      return ProcessBranchResult.PrLimitReached;\n    }\n    // TODO: ensurePr should check for automerge itself\n    if (result === PrResult.AwaitingApproval) {\n      return ProcessBranchResult.NeedsPrApproval;\n    }\n    if (\n      result === PrResult.AwaitingGreenBranch ||\n      result === PrResult.AwaitingNotPending\n    ) {\n      return ProcessBranchResult.Pending;\n    }\n    if (pr) {\n      const topic = emojify(':warning: Artifact update problem');\n      if (config.artifactErrors?.length) {\n        logger.warn(\n          { artifactErrors: config.artifactErrors },\n          'artifactErrors'\n        );\n        let content = `Renovate failed to update `;\n        content +=\n          config.artifactErrors.length > 1 ? 'artifacts' : 'an artifact';\n        content +=\n          ' related to this branch. You probably do not want to merge this PR as-is.';\n        content += emojify(\n          `\\n\\n:recycle: Renovate will retry this branch, including artifacts, only when one of the following happens:\\n\\n`\n        );\n        content +=\n          ' - any of the package files in this branch needs updating, or \\n';\n        content += ' - the branch becomes conflicted, or\\n';\n        content +=\n          ' - you check the rebase/retry checkbox if found above, or\\n';\n        content +=\n          ' - you rename this PR\\'s title to start with \"rebase!\" to trigger it manually';\n        content += '\\n\\nThe artifact failure details are included below:\\n\\n';\n        config.artifactErrors.forEach((error) => {\n          content += `##### File name: ${error.lockFile}\\n\\n`;\n          content += `\\`\\`\\`\\n${error.stderr}\\n\\`\\`\\`\\n\\n`;\n        });\n        content = platform.getPrBody(content);\n        if (\n          !(\n            config.suppressNotifications.includes('artifactErrors') ||\n            config.suppressNotifications.includes('lockFileErrors')\n          )\n        ) {\n          if (config.dryRun) {\n            logger.info(\n              `DRY-RUN: Would ensure lock file error comment in PR #${pr.number}`\n            );\n          } else {\n            await platform.ensureComment({\n              number: pr.number,\n              topic,\n              content,\n            });\n          }\n        }\n        const context = `renovate/artifacts`;\n        const description = 'Artifact file update failure';\n        const state = BranchStatus.red;\n        const existingState = await platform.getBranchStatusCheck(\n          config.branchName,\n          context\n        );\n        // Check if state needs setting\n        if (existingState !== state) {\n          logger.debug(`Updating status check state to failed`);\n          if (config.dryRun) {\n            logger.info(\n              'DRY-RUN: Would set branch status in ' + config.branchName\n            );\n          } else {\n            await platform.setBranchStatus({\n              branchName: config.branchName,\n              context,\n              description,\n              state,\n            });\n          }\n        }\n      } else {\n        if (config.updatedArtifacts?.length) {\n          // istanbul ignore if\n          if (config.dryRun) {\n            logger.info(\n              `DRY-RUN: Would ensure comment removal in PR #${pr.number}`\n            );\n          } else {\n            // Remove artifacts error comment only if this run has successfully updated artifacts\n            await platform.ensureCommentRemoval({ number: pr.number, topic });\n          }\n        }\n        const prAutomerged = await checkAutoMerge(pr, config);\n        if (prAutomerged && config.automergeType !== 'pr-comment') {\n          await deleteBranchSilently(config.branchName);\n          return ProcessBranchResult.Automerged;\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (\n      err instanceof ExternalHostError ||\n      [PLATFORM_RATE_LIMIT_EXCEEDED, REPOSITORY_CHANGED].includes(err.message)\n    ) {\n      logger.debug('Passing PR error up');\n      throw err;\n    }\n    // Otherwise don't throw here - we don't want to stop the other renovations\n    logger.error({ err }, `Error ensuring PR: ${String(err.message)}`);\n  }\n  if (!branchExists) {\n    return ProcessBranchResult.PrCreated;\n  }\n  return ProcessBranchResult.Done;\n}\n"]}