{"version":3,"file":"create.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/create.ts"],"names":[],"mappings":";;;AACA,gEAAiE;AACjE,+CAA4C;AAC5C,8CAAmD;AACnD,8DAAsE;AACtE,qCAA+C;AAE/C,MAAM,iBAAiB,GAAG,6BAAe,CAAC,CAAC,CAAC,CAAC;AAEtC,KAAK,UAAU,sBAAsB,CAC1C,MAA+B;IAE/B,eAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IACzC,MAAM,QAAQ,GAAG,MAAM,4BAAmB,CAAC,MAAM,CAAC,CAAC;IACnD,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAE3C,MAAM,UAAU,GAAG,6BAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,wBAAwB,CAAC;QAC1E,CAAC,CAAC,MAAM,CAAC,wBAAwB;QACjC,CAAC,CAAC,iBAAiB,CAAC;IAEtB,IAAI,mBAAmB,GAAG,EAAE,CAAC;IAC7B,IAAI,MAAM,CAAC,mBAAmB,EAAE;QAC9B,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;KAClD;SAAM,IAAI,MAAM,CAAC,eAAe,KAAK,SAAS,EAAE;QAC/C,mBAAmB,GAAG,MAAM,CAAC,kBAAkB,CAAC;QAChD,IAAI,MAAM,CAAC,mBAAmB,EAAE;YAC9B,mBAAmB,IAAI,IAAI,MAAM,CAAC,mBAAmB,GAAG,CAAC;SAC1D;KACF;IACD,IAAI,mBAAmB,EAAE;QACvB,mBAAmB,GAAG,0CAAyB,CAAC,mBAAmB,CAAC,CAAC;KACtE;IAED,IAAI,uBAA+B,CAAC;IACpC,IAAI,MAAM,CAAC,uBAAuB,EAAE;QAClC,uBAAuB,GAAG,MAAM,CAAC,uBAAuB,CAAC;KAC1D;SAAM;QACL,uBAAuB,GAAG,GACxB,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAChC,IAAI,UAAU,EAAE,CAAC;KAClB;IAED,MAAM,aAAa,GAAG,GAAG,mBAAmB,IAAI,uBAAuB,EAAE,CAAC,IAAI,EAAE,CAAC;IAEjF,qBAAqB;IACrB,IAAI,MAAM,CAAC,MAAM,EAAE;QACjB,eAAM,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;KACb;IACD,OAAO,iBAAW,CAAC;QACjB,UAAU,EAAE,MAAM,CAAC,gBAAgB;QACnC,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,UAAU;gBAChB,QAAQ;aACT;SACF;QACD,OAAO,EAAE,aAAa;KACvB,CAAC,CAAC;AACL,CAAC;AAlDD,wDAkDC","sourcesContent":["import { RenovateConfig } from '../../../../config';\nimport { configFileNames } from '../../../../config/app-strings';\nimport { logger } from '../../../../logger';\nimport { commitFiles } from '../../../../util/git';\nimport { formatCommitMessagePrefix } from '../../util/commit-message';\nimport { getOnboardingConfig } from './config';\n\nconst defaultConfigFile = configFileNames[0];\n\nexport async function createOnboardingBranch(\n  config: Partial<RenovateConfig>\n): Promise<string | null> {\n  logger.debug('createOnboardingBranch()');\n  const contents = await getOnboardingConfig(config);\n  logger.debug('Creating onboarding branch');\n\n  const configFile = configFileNames.includes(config.onboardingConfigFileName)\n    ? config.onboardingConfigFileName\n    : defaultConfigFile;\n\n  let commitMessagePrefix = '';\n  if (config.commitMessagePrefix) {\n    commitMessagePrefix = config.commitMessagePrefix;\n  } else if (config.semanticCommits === 'enabled') {\n    commitMessagePrefix = config.semanticCommitType;\n    if (config.semanticCommitScope) {\n      commitMessagePrefix += `(${config.semanticCommitScope})`;\n    }\n  }\n  if (commitMessagePrefix) {\n    commitMessagePrefix = formatCommitMessagePrefix(commitMessagePrefix);\n  }\n\n  let onboardingCommitMessage: string;\n  if (config.onboardingCommitMessage) {\n    onboardingCommitMessage = config.onboardingCommitMessage;\n  } else {\n    onboardingCommitMessage = `${\n      commitMessagePrefix ? 'add' : 'Add'\n    } ${configFile}`;\n  }\n\n  const commitMessage = `${commitMessagePrefix} ${onboardingCommitMessage}`.trim();\n\n  // istanbul ignore if\n  if (config.dryRun) {\n    logger.info('DRY-RUN: Would commit files to onboarding branch');\n    return null;\n  }\n  return commitFiles({\n    branchName: config.onboardingBranch,\n    files: [\n      {\n        name: configFile,\n        contents,\n      },\n    ],\n    message: commitMessage,\n  });\n}\n"]}