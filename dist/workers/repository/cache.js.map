{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../../lib/workers/repository/cache.ts"],"names":[],"mappings":";AAAA,0BAA0B;;;AAE1B,yCAAsC;AACtC,6CAA0C;AAC1C,4DAIqC;AACrC,wCAIwB;AAGxB,SAAS,0BAA0B,CACjC,OAA4B;IAE5B,MAAM,EACJ,UAAU,EACV,OAAO,EACP,UAAU,EACV,YAAY,EACZ,WAAW,EACX,SAAS,EACT,aAAa,EACb,SAAS,EACT,SAAS,GACV,GAAG,OAAO,CAAC;IACZ,OAAO;QACL,UAAU;QACV,OAAO;QACP,UAAU;QACV,YAAY;QACZ,WAAW;QACX,SAAS;QACT,aAAa;QACb,SAAS;QACT,SAAS;KACV,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,mBAAmB,CAAC,MAAoB;IACrD,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IAC9B,IAAI;QACF,MAAM,GAAG,GAAG,qBAAe,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;QAChD,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,GAAG,EAAE;YACP,SAAS,GAAG,MAAM,wBAAkB,CAAC,UAAU,CAAC,CAAC;YACjD,MAAM,QAAQ,GAAG,MAAM,mBAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YACxD,IAAI,QAAQ,EAAE;gBACZ,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC;aACxB;SACF;QACD,MAAM,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;QACrC,IAAI,UAAU,GAAG,KAAK,CAAC;QACvB,IAAI,GAAG,EAAE;YACP,IAAI;gBACF,UAAU,GAAG,MAAM,sBAAgB,CAAC,UAAU,CAAC,CAAC;aACjD;YAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;gBACvC,aAAa;aACd;SACF;QACD,MAAM,QAAQ,GAAyB,MAAM,CAAC,QAAQ;YACpD,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC;YACjD,CAAC,CAAC,EAAE,CAAC;QACP,OAAO;YACL,UAAU;YACV,GAAG;YACH,SAAS;YACT,IAAI;YACJ,SAAS;YACT,UAAU;YACV,QAAQ;SACT,CAAC;KACH;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,+BAA+B,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAEM,KAAK,UAAU,cAAc,CAAC,QAAwB;IAC3D,MAAM,WAAW,GAAkB,EAAE,CAAC;IACtC,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;QAC7B,WAAW,CAAC,IAAI,CAAC,MAAM,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;KACrD;IACD,qBAAQ,EAAE,CAAC,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACpD,CAAC;AAND,wCAMC","sourcesContent":["/* istanbul ignore file */\n\nimport { logger } from '../../logger';\nimport { platform } from '../../platform';\nimport {\n  BranchCache,\n  BranchUpgradeCache,\n  getCache,\n} from '../../util/cache/repository';\nimport {\n  getBranchCommit,\n  getBranchParentSha,\n  isBranchModified,\n} from '../../util/git';\nimport { BranchConfig, BranchUpgradeConfig } from '../common';\n\nfunction generateBranchUpgradeCache(\n  upgrade: BranchUpgradeConfig\n): BranchUpgradeCache {\n  const {\n    datasource,\n    depName,\n    lookupName,\n    fixedVersion,\n    fromVersion,\n    toVersion,\n    currentDigest,\n    newDigest,\n    sourceUrl,\n  } = upgrade;\n  return {\n    datasource,\n    depName,\n    lookupName,\n    fixedVersion,\n    fromVersion,\n    toVersion,\n    currentDigest,\n    newDigest,\n    sourceUrl,\n  };\n}\n\nasync function generateBranchCache(branch: BranchConfig): Promise<BranchCache> {\n  const { branchName } = branch;\n  try {\n    const sha = getBranchCommit(branchName) || null;\n    let prNo = null;\n    let parentSha = null;\n    if (sha) {\n      parentSha = await getBranchParentSha(branchName);\n      const branchPr = await platform.getBranchPr(branchName);\n      if (branchPr) {\n        prNo = branchPr.number;\n      }\n    }\n    const automerge = !!branch.automerge;\n    let isModified = false;\n    if (sha) {\n      try {\n        isModified = await isBranchModified(branchName);\n      } catch (err) /* istanbul ignore next */ {\n        // Do nothing\n      }\n    }\n    const upgrades: BranchUpgradeCache[] = branch.upgrades\n      ? branch.upgrades.map(generateBranchUpgradeCache)\n      : [];\n    return {\n      branchName,\n      sha,\n      parentSha,\n      prNo,\n      automerge,\n      isModified,\n      upgrades,\n    };\n  } catch (err) {\n    logger.error({ err, branchName }, 'Error generating branch cache');\n    return null;\n  }\n}\n\nexport async function setBranchCache(branches: BranchConfig[]): Promise<void> {\n  const branchCache: BranchCache[] = [];\n  for (const branch of branches) {\n    branchCache.push(await generateBranchCache(branch));\n  }\n  getCache().branches = branchCache.filter(Boolean);\n}\n"]}