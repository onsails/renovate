{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/filter.ts"],"names":[],"mappings":"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","sourcesContent":["import * as semver from 'semver';\nimport { CONFIG_VALIDATION } from '../../../../constants/error-messages';\nimport { Release } from '../../../../datasource';\nimport { logger } from '../../../../logger';\nimport { configRegexPredicate, isConfigRegex } from '../../../../util/regex';\nimport * as allVersioning from '../../../../versioning';\nimport * as npmVersioning from '../../../../versioning/npm';\nimport * as pep440 from '../../../../versioning/pep440';\nimport * as poetryVersioning from '../../../../versioning/poetry';\n\nexport interface FilterConfig {\n  allowedVersions?: string;\n  depName?: string;\n  followTag?: string;\n  ignoreDeprecated?: boolean;\n  ignoreUnstable?: boolean;\n  respectLatest?: boolean;\n  versioning: string;\n}\n\nexport function filterVersions(\n  config: FilterConfig,\n  fromVersion: string,\n  latestVersion: string,\n  releases: Release[]\n): Release[] {\n  const {\n    ignoreUnstable,\n    ignoreDeprecated,\n    respectLatest,\n    allowedVersions,\n  } = config;\n  let versioning;\n  function isVersionStable(version: string): boolean {\n    if (!versioning.isStable(version)) {\n      return false;\n    }\n    // Check if the datasource returned isStable = false\n    const release = releases.find((r) => r.version === version);\n    if (release?.isStable === false) {\n      return false;\n    }\n    return true;\n  }\n  versioning = allVersioning.get(config.versioning);\n  if (!fromVersion) {\n    return [];\n  }\n\n  // Leave only versions greater than current\n  let filteredVersions = releases.filter((v) =>\n    versioning.isGreaterThan(v.version, fromVersion)\n  );\n\n  // Don't upgrade from non-deprecated to deprecated\n  const fromRelease = releases.find(\n    (release) => release.version === fromVersion\n  );\n  if (ignoreDeprecated && fromRelease && !fromRelease.isDeprecated) {\n    filteredVersions = filteredVersions.filter((v) => {\n      const versionRelease = releases.find(\n        (release) => release.version === v.version\n      );\n      if (versionRelease.isDeprecated) {\n        logger.debug(\n          `Skipping ${config.depName}@${v.version} because it is deprecated`\n        );\n        return false;\n      }\n      return true;\n    });\n  }\n\n  if (allowedVersions) {\n    if (isConfigRegex(allowedVersions)) {\n      const isAllowed = configRegexPredicate(allowedVersions);\n      filteredVersions = filteredVersions.filter(({ version }) =>\n        isAllowed(version)\n      );\n    } else if (versioning.isValid(allowedVersions)) {\n      filteredVersions = filteredVersions.filter((v) =>\n        versioning.matches(v.version, allowedVersions)\n      );\n    } else if (\n      config.versioning !== npmVersioning.id &&\n      semver.validRange(allowedVersions)\n    ) {\n      logger.debug(\n        { depName: config.depName },\n        'Falling back to npm semver syntax for allowedVersions'\n      );\n      filteredVersions = filteredVersions.filter((v) =>\n        semver.satisfies(semver.coerce(v.version), allowedVersions)\n      );\n    } else if (\n      config.versioning === poetryVersioning.id &&\n      pep440.isValid(allowedVersions)\n    ) {\n      logger.debug(\n        { depName: config.depName },\n        'Falling back to pypi syntax for allowedVersions'\n      );\n      filteredVersions = filteredVersions.filter((v) =>\n        pep440.matches(v.version, allowedVersions)\n      );\n    } else {\n      const error = new Error(CONFIG_VALIDATION);\n      error.configFile = 'config';\n      error.validationError = 'Invalid `allowedVersions`';\n      error.validationMessage =\n        'The following allowedVersions does not parse as a valid version or range: ' +\n        JSON.stringify(allowedVersions);\n      throw error;\n    }\n  }\n\n  // Return all versions if we aren't ignore unstable. Also ignore latest\n  if (config.followTag || ignoreUnstable === false) {\n    return filteredVersions;\n  }\n\n  // if current is unstable then allow unstable in the current major only\n  if (!isVersionStable(fromVersion)) {\n    // Allow unstable only in current major\n    return filteredVersions.filter(\n      (v) =>\n        isVersionStable(v.version) ||\n        (versioning.getMajor(v.version) === versioning.getMajor(fromVersion) &&\n          versioning.getMinor(v.version) === versioning.getMinor(fromVersion) &&\n          versioning.getPatch(v.version) === versioning.getPatch(fromVersion))\n    );\n  }\n\n  // Normal case: remove all unstable\n  filteredVersions = filteredVersions.filter((v) => isVersionStable(v.version));\n\n  // Filter the latest\n\n  // No filtering if no latest\n  // istanbul ignore if\n  if (!latestVersion) {\n    return filteredVersions;\n  }\n  // No filtering if not respecting latest\n  if (respectLatest === false) {\n    return filteredVersions;\n  }\n  // No filtering if fromVersion is already past latest\n  if (versioning.isGreaterThan(fromVersion, latestVersion)) {\n    return filteredVersions;\n  }\n  return filteredVersions.filter(\n    (v) => !versioning.isGreaterThan(v.version, latestVersion)\n  );\n}\n"]}