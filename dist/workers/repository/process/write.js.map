{"version":3,"file":"write.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/write.ts"],"names":[],"mappings":";;;AACA,4CAA8D;AAC9D,2CAAiD;AACjD,yCAA6C;AAC7C,yCAAiE;AACjE,gDAA0E;AAC1E,qCAAiE;AAI1D,KAAK,UAAU,YAAY,CAChC,MAAsB,EACtB,WAA2B;IAE3B,IAAI,QAAQ,GAAG,WAAW,CAAC;IAC3B,eAAM,CAAC,KAAK,CACV,cAAc,QAAQ,CAAC,MAAM,UAC3B,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EACjC,KAAK,QAAQ;SACV,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;SACxB,IAAI,EAAE;SACN,IAAI,CAAC,IAAI,CAAC,EAAE,CAChB,CAAC;IACF,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,EAAE;QAC1C,IAAI,YAAY,CAAC,YAAY,EAAE;YAC7B,eAAM,CAAC,KAAK,CAAC,UAAU,YAAY,CAAC,UAAU,yBAAyB,CAAC,CAAC;YACzE,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;IAEH,MAAM,YAAY,GAAG,MAAM,wBAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC7D,eAAM,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,EAAE,2CAA2C,CAAC,CAAC;IAC5E,oBAAW,CAAC,cAAK,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IAE9C,MAAM,iBAAiB,GAAG,6BAAoB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACjE,eAAM,CAAC,KAAK,CACV,EAAE,iBAAiB,EAAE,EACrB,gDAAgD,CACjD,CAAC;IACF,oBAAW,CAAC,cAAK,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IAE/C,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;QAC7B,gBAAO,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;QACvC,MAAM,aAAa,GAAG,kBAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACtD,MAAM,GAAG,GAAG,MAAM,sBAAa,CAAC,MAAM,CAAC,CAAC;QACxC,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;QACjB,IACE,GAAG,KAAK,4BAAmB,CAAC,UAAU;YACtC,MAAM,CAAC,aAAa,KAAK,YAAY,EACrC;YACA,sEAAsE;YACtE,OAAO,YAAY,CAAC;SACrB;QACD,IAAI,CAAC,aAAa,IAAI,kBAAY,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;YACrD,wBAAe,CAAC,cAAK,CAAC,QAAQ,CAAC,CAAC;SACjC;KACF;IACD,mBAAU,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvB,OAAO,MAAM,CAAC;AAChB,CAAC;AAlDD,oCAkDC","sourcesContent":["import { RenovateConfig } from '../../../config';\nimport { addMeta, logger, removeMeta } from '../../../logger';\nimport { branchExists } from '../../../util/git';\nimport { processBranch } from '../../branch';\nimport { BranchConfig, ProcessBranchResult } from '../../common';\nimport { Limit, incLimitedValue, setMaxLimit } from '../../global/limits';\nimport { getBranchesRemaining, getPrsRemaining } from './limits';\n\nexport type WriteUpdateResult = 'done' | 'automerged';\n\nexport async function writeUpdates(\n  config: RenovateConfig,\n  allBranches: BranchConfig[]\n): Promise<WriteUpdateResult> {\n  let branches = allBranches;\n  logger.debug(\n    `Processing ${branches.length} branch${\n      branches.length !== 1 ? 'es' : ''\n    }: ${branches\n      .map((b) => b.branchName)\n      .sort()\n      .join(', ')}`\n  );\n  branches = branches.filter((branchConfig) => {\n    if (branchConfig.blockedByPin) {\n      logger.debug(`Branch ${branchConfig.branchName} is blocked by a Pin PR`);\n      return false;\n    }\n    return true;\n  });\n\n  const prsRemaining = await getPrsRemaining(config, branches);\n  logger.debug({ prsRemaining }, 'Calculated maximum PRs remaining this run');\n  setMaxLimit(Limit.PullRequests, prsRemaining);\n\n  const branchesRemaining = getBranchesRemaining(config, branches);\n  logger.debug(\n    { branchesRemaining },\n    'Calculated maximum branches remaining this run'\n  );\n  setMaxLimit(Limit.Branches, branchesRemaining);\n\n  for (const branch of branches) {\n    addMeta({ branch: branch.branchName });\n    const branchExisted = branchExists(branch.branchName);\n    const res = await processBranch(branch);\n    branch.res = res;\n    if (\n      res === ProcessBranchResult.Automerged &&\n      branch.automergeType !== 'pr-comment'\n    ) {\n      // Stop processing other branches because base branch has been changed\n      return 'automerged';\n    }\n    if (!branchExisted && branchExists(branch.branchName)) {\n      incLimitedValue(Limit.Branches);\n    }\n  }\n  removeMeta(['branch']);\n  return 'done';\n}\n"]}