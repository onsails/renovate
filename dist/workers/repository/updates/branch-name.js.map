{"version":3,"file":"branch-name.js","sourceRoot":"","sources":["../../../../lib/workers/repository/updates/branch-name.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iDAAqD;AACrD,sDAA8B;AAE9B,4CAAyC;AACzC,iEAAmD;AAEnD;;;;;;;GAOG;AACH,SAAS,eAAe,CAAC,UAAkB;IACzC,OAAO,qBAAW,CAAC,UAAU,CAAC;SAC3B,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,0BAA0B;SACjD,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,0BAA0B;SAChD,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa;AACtC,CAAC;AAED,sCAAsC;AACtC,SAAgB,kBAAkB,CAAC,MAAsB;IACvD,oCAAoC;IACpC,IAAI,MAAM,CAAC,SAAS,EAAE;QACpB,eAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QAChD,eAAM,CAAC,KAAK,CACV,cAAc,MAAM,CAAC,OAAO,qBAAqB,MAAM,CAAC,SAAS,EAAE,CACpE,CAAC;QACF,MAAM,CAAC,SAAS,GAAG,iBAAO,CAAC,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,EAAE;YAC/D,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;QACH,IAAI,MAAM,CAAC,UAAU,KAAK,OAAO,IAAI,MAAM,CAAC,kBAAkB,EAAE;YAC9D,IAAI,MAAM,CAAC,qBAAqB,EAAE;gBAChC,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACzC,MAAM,CAAC,SAAS,GAAG,SAAS,QAAQ,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;aAC5D;iBAAM;gBACL,MAAM,CAAC,SAAS,GAAG,SAAS,MAAM,CAAC,SAAS,EAAE,CAAC;aAChD;SACF;QACD,IAAI,MAAM,CAAC,UAAU,KAAK,OAAO,EAAE;YACjC,MAAM,CAAC,SAAS,GAAG,SAAS,MAAM,CAAC,SAAS,EAAE,CAAC;SAChD;QACD,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,IAAI,MAAM,CAAC,WAAW,CAAC;QACpE,MAAM,CAAC,UAAU,GAAG,QAAQ,CAAC,OAAO,CAClC,MAAM,CAAC,KAAK,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,EAC5C,MAAM,CACP,CAAC;KACH;SAAM;QACL,MAAM,CAAC,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;KACjE;IACD,kDAAkD;IAClD,MAAM,CAAC,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAChE,MAAM,CAAC,UAAU,GAAG,eAAe,CACjC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAC5C,CAAC;AACJ,CAAC;AAlCD,gDAkCC","sourcesContent":["import { clean as cleanGitRef } from 'clean-git-ref';\nimport slugify from 'slugify';\nimport { RenovateConfig } from '../../../config/common';\nimport { logger } from '../../../logger';\nimport * as template from '../../../util/template';\n\n/**\n * Clean git branch name\n *\n * Remove what clean-git-ref fails to:\n * - leading dot/leading dot after slash\n * - trailing dot\n * - whitespace\n */\nfunction cleanBranchName(branchName: string): string {\n  return cleanGitRef(branchName)\n    .replace(/^\\.|\\.$/, '') // leading or trailing dot\n    .replace(/\\/\\./g, '/') // leading dot after slash\n    .replace(/\\s/g, ''); // whitespace\n}\n\n/* eslint-disable no-param-reassign */\nexport function generateBranchName(update: RenovateConfig): void {\n  // Check whether to use a group name\n  if (update.groupName) {\n    logger.debug('Using group branchName template');\n    logger.debug(\n      `Dependency ${update.depName} is part of group ${update.groupName}`\n    );\n    update.groupSlug = slugify(update.groupSlug || update.groupName, {\n      lower: true,\n    });\n    if (update.updateType === 'major' && update.separateMajorMinor) {\n      if (update.separateMultipleMajor) {\n        const newMajor = String(update.newMajor);\n        update.groupSlug = `major-${newMajor}-${update.groupSlug}`;\n      } else {\n        update.groupSlug = `major-${update.groupSlug}`;\n      }\n    }\n    if (update.updateType === 'patch') {\n      update.groupSlug = `patch-${update.groupSlug}`;\n    }\n    update.branchTopic = update.group.branchTopic || update.branchTopic;\n    update.branchName = template.compile(\n      update.group.branchName || update.branchName,\n      update\n    );\n  } else {\n    update.branchName = template.compile(update.branchName, update);\n  }\n  // Compile extra times in case of nested templates\n  update.branchName = template.compile(update.branchName, update);\n  update.branchName = cleanBranchName(\n    template.compile(update.branchName, update)\n  );\n}\n"]}