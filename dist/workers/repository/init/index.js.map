{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/index.ts"],"names":[],"mappings":";;;AACA,4CAAyC;AACzC,+CAA4C;AAC5C,2CAAoD;AACpD,8CAAkD;AAClD,iCAAkC;AAClC,mCAA2C;AAC3C,qCAAyC;AACzC,mDAA4D;AAE5D,SAAS,gBAAgB,CAAC,MAAsB;IAC9C,OAAO,EAAE,GAAG,aAAK,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;AACxE,CAAC;AAEM,KAAK,UAAU,QAAQ,CAC5B,OAAuB;IAEvB,IAAI,MAAM,GAAmB,gBAAgB,CAAC,OAAO,CAAC,CAAC;IACvD,MAAM,wBAAgB,CAAC,MAAM,CAAC,CAAC;IAC/B,MAAM,GAAG,MAAM,eAAQ,CAAC,MAAM,CAAC,CAAC;IAChC,MAAM,GAAG,MAAM,sBAAa,CAAC,MAAM,CAAC,CAAC;IACrC,8BAAiB,CAAC,MAAM,CAAC,CAAC;IAC1B,MAAM,qBAAe,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IAC3C,MAAM,GAAG,MAAM,yCAAyB,CAAC,MAAM,CAAC,CAAC;IACjD,qBAAqB;IACrB,IAAI,MAAM,CAAC,WAAW,EAAE;QACtB,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,EAAE,wCAAwC,CAAC,CAAC;KACpE;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAfD,4BAeC","sourcesContent":["import { RenovateConfig } from '../../../config';\nimport { logger } from '../../../logger';\nimport { clone } from '../../../util/clone';\nimport { setBranchPrefix } from '../../../util/git';\nimport { checkIfConfigured } from '../configured';\nimport { initApis } from './apis';\nimport { initializeCaches } from './cache';\nimport { getRepoConfig } from './config';\nimport { detectVulnerabilityAlerts } from './vulnerability';\n\nfunction initializeConfig(config: RenovateConfig): RenovateConfig {\n  return { ...clone(config), errors: [], warnings: [], branchList: [] };\n}\n\nexport async function initRepo(\n  config_: RenovateConfig\n): Promise<RenovateConfig> {\n  let config: RenovateConfig = initializeConfig(config_);\n  await initializeCaches(config);\n  config = await initApis(config);\n  config = await getRepoConfig(config);\n  checkIfConfigured(config);\n  await setBranchPrefix(config.branchPrefix);\n  config = await detectVulnerabilityAlerts(config);\n  // istanbul ignore if\n  if (config.printConfig) {\n    logger.debug({ config }, 'Full resolved config including presets');\n  }\n  return config;\n}\n"]}