{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/pr/changelog/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAAyC;AACzC,mEAAqD;AAGrD,yCAAgD;AAChD,8DAAgD;AAChD,8DAAgD;AAEhD,2CAAyB;AAElB,KAAK,UAAU,gBAAgB,CACpC,IAAyB;;IAEzB,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;IAC/D,IAAI;QACF,IAAI,CAAC,CAAC,SAAS,IAAI,WAAW,IAAI,SAAS,CAAC,EAAE;YAC5C,OAAO,IAAI,CAAC;SACb;QACD,MAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC9C,IAAI,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,EAAE;YAC1C,OAAO,IAAI,CAAC;SACb;QACD,eAAM,CAAC,KAAK,CACV,uBAAuB,SAAS,KAAK,WAAW,OAAO,SAAS,GAAG,CACpE,CAAC;QACF,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,6BAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;QAEnE,IAAI,GAAG,GAA2B,IAAI,CAAC;QAEvC,UAAI,IAAI,CAAC,SAAS,0CAAE,QAAQ,CAAC,QAAQ,GAAG;YACtC,GAAG,GAAG,MAAM,YAAY,CAAC,gBAAgB,CAAC,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;SAClE;aAAM;YACL,GAAG,GAAG,MAAM,YAAY,CAAC,gBAAgB,CAAC,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;SAClE;QACD,OAAO,GAAG,CAAC;KACZ;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,wBAAwB,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AA7BD,4CA6BC","sourcesContent":["import { logger } from '../../../logger';\nimport * as allVersioning from '../../../versioning';\nimport { BranchUpgradeConfig } from '../../common';\nimport { ChangeLogResult } from './common';\nimport { getInRangeReleases } from './releases';\nimport * as sourceGithub from './source-github';\nimport * as sourceGitlab from './source-gitlab';\n\nexport * from './common';\n\nexport async function getChangeLogJSON(\n  args: BranchUpgradeConfig\n): Promise<ChangeLogResult | null> {\n  const { sourceUrl, versioning, fromVersion, toVersion } = args;\n  try {\n    if (!(sourceUrl && fromVersion && toVersion)) {\n      return null;\n    }\n    const version = allVersioning.get(versioning);\n    if (version.equals(fromVersion, toVersion)) {\n      return null;\n    }\n    logger.debug(\n      `Fetching changelog: ${sourceUrl} (${fromVersion} -> ${toVersion})`\n    );\n    const releases = args.releases || (await getInRangeReleases(args));\n\n    let res: ChangeLogResult | null = null;\n\n    if (args.sourceUrl?.includes('gitlab')) {\n      res = await sourceGitlab.getChangeLogJSON({ ...args, releases });\n    } else {\n      res = await sourceGithub.getChangeLogJSON({ ...args, releases });\n    }\n    return res;\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ config: args, err }, 'getChangeLogJSON error');\n    return null;\n  }\n}\n"]}