{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/git/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport fs from 'fs-extra';\nimport GitUrlParse from 'git-url-parse';\nimport Git, {\n  DiffResult as DiffResult_,\n  ResetMode,\n  SimpleGit,\n  StatusResult as StatusResult_,\n} from 'simple-git';\nimport { join } from 'upath';\nimport { configFileNames } from '../../config/app-strings';\nimport {\n  REPOSITORY_CHANGED,\n  REPOSITORY_DISABLED,\n  REPOSITORY_EMPTY,\n  REPOSITORY_TEMPORARY_ERROR,\n  SYSTEM_INSUFFICIENT_DISK_SPACE,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { GitOptions, GitProtocol } from '../../types/git';\nimport { Limit, incLimitedValue } from '../../workers/global/limits';\nimport { configSigningKey, writePrivateKey } from './private-key';\n\nexport * from './private-key';\n\ndeclare module 'fs-extra' {\n  export function exists(pathLike: string): Promise<boolean>;\n}\n\nexport type StatusResult = StatusResult_;\n\nexport type DiffResult = DiffResult_;\n\nexport type CommitSha = string;\n\ninterface StorageConfig {\n  localDir: string;\n  currentBranch?: string;\n  url: string;\n  extraCloneOpts?: GitOptions;\n  gitAuthorName?: string;\n  gitAuthorEmail?: string;\n  cloneSubmodules?: boolean;\n}\n\ninterface LocalConfig extends StorageConfig {\n  additionalBranches: string[];\n  currentBranch: string;\n  currentBranchSha: string;\n  branchCommits: Record<string, CommitSha>;\n  branchIsModified: Record<string, boolean>;\n  branchPrefix: string;\n}\n\n// istanbul ignore next\nfunction checkForPlatformFailure(err: Error): void {\n  if (process.env.NODE_ENV === 'test') {\n    return;\n  }\n  const platformFailureStrings = [\n    'remote: Invalid username or password',\n    'gnutls_handshake() failed',\n    'The requested URL returned error: 5',\n    'The remote end hung up unexpectedly',\n    'access denied or repository not exported',\n    'Could not write new index file',\n    'Failed to connect to',\n    'Connection timed out',\n    'malformed object name',\n    'TF401027:', // You need the Git 'GenericContribute' permission to perform this action\n  ];\n  for (const errorStr of platformFailureStrings) {\n    if (err.message.includes(errorStr)) {\n      logger.debug({ err }, 'Converting git error to ExternalHostError');\n      throw new ExternalHostError(err, 'git');\n    }\n  }\n}\n\nfunction localName(branchName: string): string {\n  return branchName.replace(/^origin\\//, '');\n}\n\nasync function isDirectory(dir: string): Promise<boolean> {\n  try {\n    return (await fs.stat(dir)).isDirectory();\n  } catch (err) {\n    return false;\n  }\n}\n\nasync function getDefaultBranch(git: SimpleGit): Promise<string> {\n  // see https://stackoverflow.com/a/44750379/1438522\n  try {\n    const res = await git.raw(['symbolic-ref', 'refs/remotes/origin/HEAD']);\n    return res.replace('refs/remotes/origin/', '').trim();\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    if (\n      err.message.startsWith(\n        'fatal: ref refs/remotes/origin/HEAD is not a symbolic ref'\n      )\n    ) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    throw err;\n  }\n}\n\nlet config: LocalConfig = {} as any;\n\nlet git: SimpleGit | undefined;\nlet gitInitialized: boolean;\n\nlet privateKeySet = false;\n\nasync function fetchBranchCommits(): Promise<void> {\n  config.branchCommits = {};\n  const opts = ['ls-remote', '--heads', config.url];\n  if (config.extraCloneOpts) {\n    Object.entries(config.extraCloneOpts).forEach((e) =>\n      opts.unshift(e[0], `${e[1]}`)\n    );\n  }\n  try {\n    (await git.raw(opts))\n      .split('\\n')\n      .filter(Boolean)\n      .map((line) => line.trim().split(/\\s+/))\n      .forEach(([sha, ref]) => {\n        config.branchCommits[ref.replace('refs/heads/', '')] = sha;\n      });\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'git error');\n    if (err.message?.includes('Please ask the owner to check their account')) {\n      throw new Error(REPOSITORY_DISABLED);\n    }\n    throw err;\n  }\n}\n\nexport async function initRepo(args: StorageConfig): Promise<void> {\n  config = { ...args } as any;\n  config.additionalBranches = [];\n  config.branchIsModified = {};\n  git = Git(config.localDir);\n  gitInitialized = false;\n  await fetchBranchCommits();\n}\n\nasync function resetToBranch(branchName: string): Promise<void> {\n  logger.debug(`resetToBranch(${branchName})`);\n  await git.raw(['reset', '--hard']);\n  await git.checkout(branchName);\n  await git.raw(['reset', '--hard', 'origin/' + branchName]);\n  await git.raw(['clean', '-fd']);\n}\n\nasync function deleteLocalBranch(branchName: string): Promise<void> {\n  await git.branch(['-D', branchName]);\n}\n\nasync function cleanLocalBranches(): Promise<void> {\n  const existingBranches = (await git.raw(['branch']))\n    .split('\\n')\n    .map((branch) => branch.trim())\n    .filter((branch) => branch.length)\n    .filter((branch) => !branch.startsWith('* '));\n  logger.debug({ existingBranches });\n  for (const branchName of existingBranches) {\n    await deleteLocalBranch(branchName);\n  }\n}\n\n/*\n * When we initially clone, we clone only the default branch so how no knowledge of other branches existing.\n * By calling this function once the repo's branchPrefix is known, we can fetch all of Renovate's branches in one command.\n */\nexport async function setBranchPrefix(branchPrefix: string): Promise<void> {\n  config.branchPrefix = branchPrefix;\n  // If the repo is already cloned then set branchPrefix now, otherwise it will be called again during syncGit()\n  if (gitInitialized) {\n    logger.debug('Setting branchPrefix: ' + branchPrefix);\n    const ref = `refs/heads/${branchPrefix}*:refs/remotes/origin/${branchPrefix}*`;\n    try {\n      await git.fetch(['origin', ref, '--depth=2', '--force']);\n    } catch (err) /* istanbul ignore next */ {\n      checkForPlatformFailure(err);\n      throw err;\n    }\n  }\n}\n\nexport async function getSubmodules(): Promise<string[]> {\n  try {\n    return (\n      (await git.raw([\n        'config',\n        '--file',\n        '.gitmodules',\n        '--get-regexp',\n        'path',\n      ])) || ''\n    )\n      .trim()\n      .split(/[\\n\\s]/)\n      .filter((_e: string, i: number) => i % 2);\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error getting submodules');\n    return [];\n  }\n}\n\nexport async function syncGit(): Promise<void> {\n  if (gitInitialized) {\n    return;\n  }\n  gitInitialized = true;\n  logger.debug('Initializing git repository into ' + config.localDir);\n  const gitHead = join(config.localDir, '.git/HEAD');\n  let clone = true;\n\n  if (await fs.exists(gitHead)) {\n    try {\n      await git.raw(['remote', 'set-url', 'origin', config.url]);\n      const fetchStart = Date.now();\n      await git.fetch(['--depth=10']);\n      config.currentBranch =\n        config.currentBranch || (await getDefaultBranch(git));\n      await resetToBranch(config.currentBranch);\n      await cleanLocalBranches();\n      await git.raw(['remote', 'prune', 'origin']);\n      const durationMs = Math.round(Date.now() - fetchStart);\n      logger.debug({ durationMs }, 'git fetch completed');\n      clone = false;\n    } catch (err) /* istanbul ignore next */ {\n      if (err.message === REPOSITORY_EMPTY) {\n        throw err;\n      }\n      logger.warn({ err }, 'git fetch error');\n    }\n  }\n  if (clone) {\n    await fs.emptyDir(config.localDir);\n    const cloneStart = Date.now();\n    try {\n      // clone only the default branch\n      const opts = ['--depth=10'];\n      if (config.extraCloneOpts) {\n        Object.entries(config.extraCloneOpts).forEach((e) =>\n          opts.push(e[0], `${e[1]}`)\n        );\n      }\n      await git.clone(config.url, '.', opts);\n    } catch (err) /* istanbul ignore next */ {\n      logger.debug({ err }, 'git clone error');\n      if (err.message?.includes('No space left on device')) {\n        throw new Error(SYSTEM_INSUFFICIENT_DISK_SPACE);\n      }\n      if (err.message === REPOSITORY_EMPTY) {\n        throw err;\n      }\n      throw new ExternalHostError(err, 'git');\n    }\n    const durationMs = Math.round(Date.now() - cloneStart);\n    logger.debug({ durationMs }, 'git clone completed');\n  }\n  config.currentBranchSha = (await git.raw(['rev-parse', 'HEAD'])).trim();\n  if (config.cloneSubmodules) {\n    const submodules = await getSubmodules();\n    for (const submodule of submodules) {\n      try {\n        logger.debug(`Cloning git submodule at ${submodule}`);\n        await git.submoduleUpdate(['--init', submodule]);\n      } catch (err) {\n        logger.warn(`Unable to initialise git submodule at ${submodule}`);\n      }\n    }\n  }\n  try {\n    const latestCommitDate = (await git.log({ n: 1 })).latest.date;\n    logger.debug({ latestCommitDate }, 'latest commit');\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    if (err.message.includes('does not have any commits yet')) {\n      throw new Error(REPOSITORY_EMPTY);\n    }\n    logger.warn({ err }, 'Cannot retrieve latest commit date');\n  }\n  try {\n    const { gitAuthorName, gitAuthorEmail } = config;\n    if (gitAuthorName) {\n      logger.debug({ gitAuthorName }, 'Setting git author name');\n      await git.raw(['config', 'user.name', gitAuthorName]);\n    }\n    if (gitAuthorEmail) {\n      logger.debug({ gitAuthorEmail }, 'Setting git author email');\n      await git.raw(['config', 'user.email', gitAuthorEmail]);\n    }\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    logger.debug({ err }, 'Error setting git author config');\n    throw new Error(REPOSITORY_TEMPORARY_ERROR);\n  }\n  config.currentBranch = config.currentBranch || (await getDefaultBranch(git));\n  if (config.branchPrefix) {\n    await setBranchPrefix(config.branchPrefix);\n  }\n}\n\n// istanbul ignore next\nexport async function getRepoStatus(): Promise<StatusResult> {\n  await syncGit();\n  return git.status();\n}\n\nasync function syncBranch(branchName: string): Promise<void> {\n  await syncGit();\n  if (branchName.startsWith(config.branchPrefix)) {\n    return;\n  }\n  if (config.additionalBranches.includes(branchName)) {\n    return;\n  }\n  config.additionalBranches.push(branchName);\n  // fetch the branch only if it's not part of the existing branchPrefix\n  try {\n    await git.raw(['remote', 'set-branches', '--add', 'origin', branchName]);\n    await git.fetch(['origin', branchName, '--depth=2']);\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n  }\n}\n\nexport function branchExists(branchName: string): boolean {\n  return !!config.branchCommits[branchName];\n}\n\n// Return the commit SHA for a branch\nexport function getBranchCommit(branchName: string): CommitSha | null {\n  return config.branchCommits[branchName] || null;\n}\n\n// Return the parent commit SHA for a branch\nexport async function getBranchParentSha(\n  branchName: string\n): Promise<CommitSha | null> {\n  try {\n    const branchSha = getBranchCommit(branchName);\n    const parentSha = await git.revparse([`${branchSha}^`]);\n    return parentSha;\n  } catch (err) {\n    logger.debug({ err }, 'Error getting branch parent sha');\n    return null;\n  }\n}\n\nexport async function getCommitMessages(): Promise<string[]> {\n  await syncGit();\n  logger.debug('getCommitMessages');\n  const res = await git.log({\n    n: 10,\n    format: { message: '%s' },\n  });\n  return res.all.map((commit) => commit.message);\n}\n\nexport async function checkoutBranch(branchName: string): Promise<CommitSha> {\n  logger.debug(`Setting current branch to ${branchName}`);\n  await syncBranch(branchName);\n  try {\n    config.currentBranch = branchName;\n    config.currentBranchSha = (\n      await git.raw(['rev-parse', 'origin/' + branchName])\n    ).trim();\n    await git.checkout([branchName, '-f']);\n    const latestCommitDate = (await git.log({ n: 1 }))?.latest?.date;\n    if (latestCommitDate) {\n      logger.debug({ branchName, latestCommitDate }, 'latest commit');\n    }\n    await git.reset(ResetMode.HARD);\n    return config.currentBranchSha;\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    throw err;\n  }\n}\n\nexport async function getFileList(): Promise<string[]> {\n  await syncGit();\n  const branch = config.currentBranch;\n  const submodules = await getSubmodules();\n  const files: string = await git.raw(['ls-tree', '-r', branch]);\n  // istanbul ignore if\n  if (!files) {\n    return [];\n  }\n  return files\n    .split('\\n')\n    .filter(Boolean)\n    .filter((line) => line.startsWith('100'))\n    .map((line) => line.split(/\\t/).pop())\n    .filter((file: string) =>\n      submodules.every((submodule: string) => !file.startsWith(submodule))\n    );\n}\n\nexport function getBranchList(): string[] {\n  return Object.keys(config.branchCommits);\n}\n\nexport async function isBranchStale(branchName: string): Promise<boolean> {\n  await syncBranch(branchName);\n  try {\n    const branches = await git.branch([\n      '--remotes',\n      '--verbose',\n      '--contains',\n      config.currentBranchSha,\n    ]);\n    return !branches.all.map(localName).includes(branchName);\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    throw err;\n  }\n}\n\nexport async function isBranchModified(branchName: string): Promise<boolean> {\n  await syncBranch(branchName);\n  // First check cache\n  if (config.branchIsModified[branchName] !== undefined) {\n    return config.branchIsModified[branchName];\n  }\n  if (!branchExists(branchName)) {\n    logger.debug(\n      { branchName },\n      'Branch does not exist - cannot check isModified'\n    );\n    return false;\n  }\n  // Retrieve the author of the most recent commit\n  const lastAuthor = (\n    await git.raw([\n      'log',\n      '-1',\n      '--pretty=format:%ae',\n      `origin/${branchName}`,\n      '--',\n    ])\n  ).trim();\n  const { gitAuthorEmail } = config;\n  if (\n    lastAuthor === process.env.RENOVATE_LEGACY_GIT_AUTHOR_EMAIL || // remove in next major release\n    lastAuthor === gitAuthorEmail\n  ) {\n    // author matches - branch has not been modified\n    config.branchIsModified[branchName] = false;\n    return false;\n  }\n  logger.debug(\n    { branchName, lastAuthor, gitAuthorEmail },\n    'Last commit author does not match git author email - branch has been modified'\n  );\n  config.branchIsModified[branchName] = true;\n  return true;\n}\n\nexport async function deleteBranch(branchName: string): Promise<void> {\n  await syncBranch(branchName);\n  try {\n    await git.raw(['push', '--delete', 'origin', branchName]);\n    logger.debug({ branchName }, 'Deleted remote branch');\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    logger.debug({ branchName }, 'No remote branch to delete');\n  }\n  try {\n    await deleteLocalBranch(branchName);\n    // istanbul ignore next\n    logger.debug({ branchName }, 'Deleted local branch');\n  } catch (err) {\n    checkForPlatformFailure(err);\n    logger.debug({ branchName }, 'No local branch to delete');\n  }\n  delete config.branchCommits[branchName];\n}\n\nexport async function mergeBranch(branchName: string): Promise<void> {\n  await syncBranch(branchName);\n  await git.reset(ResetMode.HARD);\n  await git.checkout(['-B', branchName, 'origin/' + branchName]);\n  await git.checkout(config.currentBranch);\n  await git.merge(['--ff-only', branchName]);\n  await git.push('origin', config.currentBranch);\n  incLimitedValue(Limit.Commits);\n}\n\nexport async function getBranchLastCommitTime(\n  branchName: string\n): Promise<Date> {\n  await syncBranch(branchName);\n  try {\n    const time = await git.show(['-s', '--format=%ai', 'origin/' + branchName]);\n    return new Date(Date.parse(time));\n  } catch (err) {\n    checkForPlatformFailure(err);\n    return new Date();\n  }\n}\n\nexport async function getBranchFiles(branchName: string): Promise<string[]> {\n  await syncBranch(branchName);\n  try {\n    const diff = await git.diffSummary([\n      `origin/${branchName}`,\n      `origin/${branchName}^`,\n    ]);\n    return diff.files.map((file) => file.file);\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'getBranchFiles error');\n    checkForPlatformFailure(err);\n    return null;\n  }\n}\n\nexport async function getFile(\n  filePath: string,\n  branchName?: string\n): Promise<string | null> {\n  await syncGit();\n  try {\n    const content = await git.show([\n      'origin/' + (branchName || config.currentBranch) + ':' + filePath,\n    ]);\n    return content;\n  } catch (err) {\n    checkForPlatformFailure(err);\n    return null;\n  }\n}\n\nexport async function hasDiff(branchName: string): Promise<boolean> {\n  await syncBranch(branchName);\n  try {\n    return (await git.diff(['HEAD', branchName])) !== '';\n  } catch (err) {\n    return true;\n  }\n}\n\n/**\n * File to commit\n */\nexport interface File {\n  /**\n   * Relative file path\n   */\n  name: string;\n\n  /**\n   * file contents\n   */\n  contents: string | Buffer;\n}\n\nexport type CommitFilesConfig = {\n  branchName: string;\n  files: File[];\n  message: string;\n  force?: boolean;\n};\n\nexport async function commitFiles({\n  branchName,\n  files,\n  message,\n  force = false,\n}: CommitFilesConfig): Promise<CommitSha | null> {\n  await syncGit();\n  logger.debug(`Committing files to branch ${branchName}`);\n  if (!privateKeySet) {\n    await writePrivateKey();\n    privateKeySet = true;\n  }\n  await configSigningKey(config.localDir);\n  try {\n    await git.reset(ResetMode.HARD);\n    await git.raw(['clean', '-fd']);\n    await git.checkout(['-B', branchName, 'origin/' + config.currentBranch]);\n    const fileNames: string[] = [];\n    const deleted: string[] = [];\n    for (const file of files) {\n      // istanbul ignore if\n      if (file.name === '|delete|') {\n        deleted.push(file.contents as string);\n      } else if (await isDirectory(join(config.localDir, file.name))) {\n        fileNames.push(file.name);\n        await git.add(file.name);\n      } else {\n        fileNames.push(file.name);\n        let contents: Buffer;\n        // istanbul ignore else\n        if (typeof file.contents === 'string') {\n          contents = Buffer.from(file.contents);\n        } else {\n          contents = file.contents;\n        }\n        await fs.outputFile(join(config.localDir, file.name), contents);\n      }\n    }\n    // istanbul ignore if\n    if (fileNames.length === 1 && configFileNames.includes(fileNames[0])) {\n      fileNames.unshift('-f');\n    }\n    if (fileNames.length) {\n      await git.add(fileNames);\n    }\n    if (deleted.length) {\n      for (const f of deleted) {\n        try {\n          await git.rm([f]);\n        } catch (err) /* istanbul ignore next */ {\n          checkForPlatformFailure(err);\n          logger.debug({ err }, 'Cannot delete ' + f);\n        }\n      }\n    }\n    const commitRes = await git.commit(message, [], {\n      '--no-verify': null,\n    });\n    const commit = commitRes?.commit || 'unknown';\n    if (!force && !(await hasDiff(`origin/${branchName}`))) {\n      logger.debug(\n        { branchName, fileNames },\n        'No file changes detected. Skipping commit'\n      );\n      return null;\n    }\n    await git.push('origin', `${branchName}:${branchName}`, {\n      '--force': null,\n      '-u': null,\n      '--no-verify': null,\n    });\n    // Fetch it after create\n    const ref = `refs/heads/${branchName}:refs/remotes/origin/${branchName}`;\n    await git.fetch(['origin', ref, '--depth=2', '--force']);\n    config.branchCommits[branchName] = (\n      await git.revparse([branchName])\n    ).trim();\n    config.branchIsModified[branchName] = false;\n    incLimitedValue(Limit.Commits);\n    return commit;\n  } catch (err) /* istanbul ignore next */ {\n    checkForPlatformFailure(err);\n    if (\n      err.message.includes(\n        'refusing to allow a GitHub App to create or update workflow'\n      )\n    ) {\n      logger.warn(\n        'App has not been granted permissions to update Workflows - aborting branch.'\n      );\n      return null;\n    }\n    if (err.message.includes('remote: error: cannot lock ref')) {\n      logger.error({ err }, 'Error committing files.');\n      return null;\n    }\n    logger.debug({ err }, 'Error committing files');\n    throw new Error(REPOSITORY_CHANGED);\n  }\n}\n\nexport function getUrl({\n  protocol,\n  auth,\n  hostname,\n  host,\n  repository,\n}: {\n  protocol?: GitProtocol;\n  auth?: string;\n  hostname?: string;\n  host?: string;\n  repository: string;\n}): string {\n  if (protocol === 'ssh') {\n    return `git@${hostname}:${repository}.git`;\n  }\n  return URL.format({\n    protocol: protocol || 'https',\n    auth,\n    hostname,\n    host,\n    pathname: repository + '.git',\n  });\n}\n\nexport function getHttpUrl(url: string, token?: string): string {\n  const parsedUrl = GitUrlParse(url);\n  parsedUrl.token = token;\n  return parsedUrl.toString('https');\n}\n"]}