{"version":3,"file":"regex.js","sourceRoot":"","sources":["../../lib/util/regex.ts"],"names":[],"mappings":";;;;;;AAAA,0DAAkC;AAClC,gEAAgE;AAChE,sCAAmC;AAEnC,IAAI,KAAwB,CAAC;AAE7B,IAAI;IACF,2BAA2B;IAC3B,MAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3B,4BAA4B;IAC5B,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3B,eAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAC1C,KAAK,GAAG,GAAG,CAAC;CACb;AAAC,OAAO,GAAG,EAAE;IACZ,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,wCAAwC,CAAC,CAAC;IAC/D,KAAK,GAAG,MAAM,CAAC;CAChB;AAED,SAAgB,KAAK,CAAC,OAAe,EAAE,KAAc;IACnD,IAAI;QACF,OAAO,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KAClC;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,kCAAiB,CAAC,CAAC;QAC3C,KAAK,CAAC,UAAU,GAAG,OAAO,CAAC;QAC3B,KAAK,CAAC,eAAe,GAAG,+BAA+B,OAAO,EAAE,CAAC;QACjE,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AATD,sBASC;AAED,SAAgB,YAAY,CAAC,KAAa;IACxC,OAAO,KAAK,CAAC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC,CAAC,oCAAoC;AAC7F,CAAC;AAFD,oCAEC;AAED,MAAM,cAAc,GAAG,OAAO,CAAC;AAC/B,MAAM,YAAY,GAAG,KAAK,CAAC;AAE3B,SAAgB,aAAa,CAAC,KAAc;IAC1C,OAAO,CACL,YAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAC3E,CAAC;AACJ,CAAC;AAJD,sCAIC;AAED,SAAS,gBAAgB,CAAC,KAAa;IACrC,IAAI;QACF,MAAM,WAAW,GAAG,KAAK;aACtB,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;aAC3B,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QAC7B,OAAO,KAAK,CAAC,WAAW,CAAC,CAAC;KAC3B;IAAC,OAAO,GAAG,EAAE;QACZ,QAAQ;KACT;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAID,SAAgB,oBAAoB,CAAC,KAAa;IAChD,MAAM,WAAW,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC5C,IAAI,WAAW,EAAE;QACf,MAAM,UAAU,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC1C,OAAO,CAAC,CAAS,EAAW,EAAE;YAC5B,MAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChC,OAAO,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QACjC,CAAC,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAVD,oDAUC","sourcesContent":["import is from '@sindresorhus/is';\nimport { CONFIG_VALIDATION } from '../constants/error-messages';\nimport { logger } from '../logger';\n\nlet RegEx: RegExpConstructor;\n\ntry {\n  // eslint-disable-next-line\n  const RE2 = require('re2');\n  // Test if native is working\n  new RE2('.*').exec('test');\n  logger.debug('Using RE2 as regex engine');\n  RegEx = RE2;\n} catch (err) {\n  logger.warn({ err }, 'RE2 not usable, falling back to RegExp');\n  RegEx = RegExp;\n}\n\nexport function regEx(pattern: string, flags?: string): RegExp {\n  try {\n    return new RegEx(pattern, flags);\n  } catch (err) {\n    const error = new Error(CONFIG_VALIDATION);\n    error.configFile = pattern;\n    error.validationError = `Invalid regular expression: ${pattern}`;\n    throw error;\n  }\n}\n\nexport function escapeRegExp(input: string): string {\n  return input.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nconst configValStart = /^!?\\//;\nconst configValEnd = /\\/$/;\n\nexport function isConfigRegex(input: unknown): input is string {\n  return (\n    is.string(input) && configValStart.test(input) && configValEnd.test(input)\n  );\n}\n\nfunction parseConfigRegex(input: string): RegExp | null {\n  try {\n    const regexString = input\n      .replace(configValStart, '')\n      .replace(configValEnd, '');\n    return regEx(regexString);\n  } catch (err) {\n    // no-op\n  }\n  return null;\n}\n\ntype ConfigRegexPredicate = (string) => boolean;\n\nexport function configRegexPredicate(input: string): ConfigRegexPredicate {\n  const configRegex = parseConfigRegex(input);\n  if (configRegex) {\n    const isPositive = !input.startsWith('!');\n    return (x: string): boolean => {\n      const res = configRegex.test(x);\n      return isPositive ? res : !res;\n    };\n  }\n  return null;\n}\n"]}