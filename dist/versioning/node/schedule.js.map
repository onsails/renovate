{"version":3,"file":"schedule.js","sourceRoot":"","sources":["../../../lib/versioning/node/schedule.ts"],"names":[],"mappings":";;;;;;AAAA,sFAAmD;AAYtC,QAAA,YAAY,GAAe,IAAI,CAAC,KAAK,CAChD,8BAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,CACvC,CAAC;AAWF,SAAgB,WAAW;IACzB,MAAM,QAAQ,GAAG;QACf,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,MAAM,EAAE,EAAE;QACV,UAAU,EAAE,EAAE;QACd,UAAU,EAAE,EAAE;QACd,OAAO,EAAE,EAAE;KACZ,CAAC;IAEF,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;IAEvB,KAAK,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,oBAAY,CAAC,EAAE;QAC3D,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QACvE,IAAI,OAAO,EAAE;YACX,MAAM,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YACzD,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,MAAM,aAAa,GACjB,IAAI,CAAC,WAAW,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC;YACvD,IAAI,CAAC,aAAa,EAAE;gBAClB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC/B;YACD,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;YACnD,IAAI,KAAK,EAAE;gBACT,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC3B,IAAI,CAAC,aAAa,EAAE;oBAClB,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACnC;aACF;SACF;KACF;IACD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACnE,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAEhE,OAAO,QAAQ,CAAC;AAClB,CAAC;AAnCD,kCAmCC","sourcesContent":["import dataFiles from '../../data-files.generated';\n\ninterface NodeJsSchedule {\n  lts?: string;\n  maintenance?: string;\n  end: string;\n  start: string;\n  codename?: string;\n}\n\nexport type NodeJsData = Record<string, NodeJsSchedule>;\n\nexport const nodeSchedule: NodeJsData = JSON.parse(\n  dataFiles.get('node-js-schedule.json')\n);\n\nexport interface NodeJsPolicies {\n  all: number[];\n  lts: number[];\n  active: number[];\n  lts_active: number[];\n  lts_latest: number[];\n  current: number[];\n}\n\nexport function getPolicies(): NodeJsPolicies {\n  const policies = {\n    all: [],\n    lts: [],\n    active: [],\n    lts_active: [],\n    lts_latest: [],\n    current: [],\n  };\n\n  const now = new Date();\n\n  for (const [vRelease, data] of Object.entries(nodeSchedule)) {\n    const isAlive = new Date(data.start) < now && new Date(data.end) > now;\n    if (isAlive) {\n      const release = parseInt(vRelease.replace(/^v/, ''), 10);\n      policies.all.push(release);\n      const isMaintenance =\n        data.maintenance && new Date(data.maintenance) < now;\n      if (!isMaintenance) {\n        policies.active.push(release);\n      }\n      const isLts = data.lts && new Date(data.lts) < now;\n      if (isLts) {\n        policies.lts.push(release);\n        if (!isMaintenance) {\n          policies.lts_active.push(release);\n        }\n      }\n    }\n  }\n  policies.current.push(policies.active[policies.active.length - 1]);\n  policies.lts_latest.push(policies.lts[policies.lts.length - 1]);\n\n  return policies;\n}\n"]}