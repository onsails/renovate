{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/node/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,iCAAiC;AAEjC,8CAAiD;AA2BxC,wFA3BK,aAAO,OA2BL;AA1BhB,yCAA0C;AAE7B,QAAA,EAAE,GAAG,MAAM,CAAC;AACZ,QAAA,WAAW,GAAG,SAAS,CAAC;AACxB,QAAA,IAAI,GAAG,EAAE,CAAC;AACV,QAAA,cAAc,GAAG,KAAK,CAAC;AAEpC,SAAS,WAAW,CAAC,EACnB,YAAY,EACZ,aAAa,EACb,WAAW,EACX,SAAS,GACM;IACf,MAAM,GAAG,GAAG,aAAG,CAAC,WAAW,CAAC;QAC1B,YAAY;QACZ,aAAa;QACb,WAAW;QACX,SAAS;KACV,CAAC,CAAC;IACH,IAAI,eAAS,CAAC,GAAG,CAAC,EAAE;QAClB,+BAA+B;QAC/B,OAAO,eAAS,CAAC,GAAG,CAAC,CAAC;KACvB;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAID,SAAgB,QAAQ,CAAC,OAAe;IACtC,IAAI,aAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACzB,MAAM,KAAK,GAAG,aAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,QAAQ,GAAG,uBAAY,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;QAC3C,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,GAAG,EAAE;YACjB,+CAA+C;YAC/C,OAAO,gBAAQ,CAAC,KAAK,EAAE,GAAG,gBAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;SAC1D;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAVD,4BAUC;AAEY,QAAA,GAAG,GAAkB;IAChC,GAAG,aAAG;IACN,QAAQ;IACR,WAAW;CACZ,CAAC;AACF,kBAAe,WAAG,CAAC","sourcesContent":["import { DateTime } from 'luxon';\nimport { NewValueConfig, VersioningApi } from '../common';\nimport npm, { isValid, isVersion } from '../npm';\nimport { nodeSchedule } from './schedule';\n\nexport const id = 'node';\nexport const displayName = 'Node.js';\nexport const urls = [];\nexport const supportsRanges = false;\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  fromVersion,\n  toVersion,\n}: NewValueConfig): string {\n  const res = npm.getNewValue({\n    currentValue,\n    rangeStrategy,\n    fromVersion,\n    toVersion,\n  });\n  if (isVersion(res)) {\n    // normalize out any 'v' prefix\n    return isVersion(res);\n  }\n  return res;\n}\n\nexport { isValid };\n\nexport function isStable(version: string): boolean {\n  if (npm.isStable(version)) {\n    const major = npm.getMajor(version);\n    const schedule = nodeSchedule[`v${major}`];\n    if (schedule?.lts) {\n      // TODO: use the exact release that started LTS\n      return DateTime.local() > DateTime.fromISO(schedule.lts);\n    }\n  }\n  return false;\n}\n\nexport const api: VersioningApi = {\n  ...npm,\n  isStable,\n  getNewValue,\n};\nexport default api;\n"]}