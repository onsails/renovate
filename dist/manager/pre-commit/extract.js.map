{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/pre-commit/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport yaml from 'js-yaml';\nimport {\n  PLATFORM_TYPE_GITEA,\n  PLATFORM_TYPE_GITHUB,\n  PLATFORM_TYPE_GITLAB,\n} from '../../constants/platforms';\nimport { id as githubTagsId } from '../../datasource/github-tags';\nimport { id as gitlabTagsId } from '../../datasource/gitlab-tags';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { find } from '../../util/host-rules';\nimport { regEx } from '../../util/regex';\nimport { PackageDependency, PackageFile } from '../common';\n\nimport {\n  matchesPrecommitConfigHeuristic,\n  matchesPrecommitDependencyHeuristic,\n} from './parsing';\nimport { PreCommitConfig } from './types';\n\nfunction isEmptyObject(obj: any): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\n/**\n * Determines the datasource(id) to be used for this dependency\n * @param repository the full git url, ie git@github.com/user/project.\n *        Used in debug statements to clearly indicate the related dependency.\n * @param hostName the hostname (ie github.com)\n *        Used to determine which renovate datasource should be used.\n *        Is matched literally against `github.com` and `gitlab.com`.\n *        If that doesn't match, `hostRules.find()` is used to find related sources.\n *        In that case, the hostname is passed on as registryUrl to the corresponding datasource.\n */\nfunction determineDatasource(\n  repository: string,\n  hostName: string\n): { datasource?: string; registryUrls?: string[]; skipReason?: SkipReason } {\n  if (hostName === 'github.com') {\n    logger.debug({ repository, hostName }, 'Found github dependency');\n    return { datasource: githubTagsId };\n  }\n  if (hostName === 'gitlab.com') {\n    logger.debug({ repository, hostName }, 'Found gitlab dependency');\n    return { datasource: gitlabTagsId };\n  }\n  const hostUrl = 'https://' + hostName;\n  const res = find({ url: hostUrl });\n  if (isEmptyObject(res)) {\n    // 1 check, to possibly prevent 3 failures in combined query of hostType & url.\n    logger.debug(\n      { repository, hostUrl },\n      'Provided hostname does not match any hostRules. Ignoring'\n    );\n    return { skipReason: SkipReason.UnknownRegistry, registryUrls: [hostName] };\n  }\n  for (const [hostType, sourceId] of [\n    [PLATFORM_TYPE_GITEA, gitlabTagsId],\n    [PLATFORM_TYPE_GITHUB, githubTagsId],\n    [PLATFORM_TYPE_GITLAB, gitlabTagsId],\n  ]) {\n    if (!isEmptyObject(find({ hostType, url: hostUrl }))) {\n      logger.debug(\n        { repository, hostUrl, hostType },\n        `Provided hostname matches a ${hostType} hostrule.`\n      );\n      return { datasource: sourceId, registryUrls: [hostName] };\n    }\n  }\n  logger.debug(\n    { repository, registry: hostUrl },\n    'Provided hostname did not match any of the hostRules of hostType gitea,github nor gitlab'\n  );\n  return { skipReason: SkipReason.UnknownRegistry, registryUrls: [hostName] };\n}\n\nfunction extractDependency(\n  tag: string,\n  repository: string\n): {\n  depName?: string;\n  depType?: string;\n  datasource?: string;\n  lookupName?: string;\n  skipReason?: SkipReason;\n  currentValue?: string;\n} {\n  logger.debug({ tag }, 'Found version');\n\n  const urlMatchers = [\n    // This splits \"http://my.github.com/user/repo\" -> \"my.github.com\" \"user/repo\n    regEx('^https?:\\\\/\\\\/(?<hostName>[^\\\\/]+)\\\\/(?<depName>\\\\S*)'),\n    // This splits \"git@private.registry.com:user/repo\" -> \"private.registry.com\" \"user/repo\n    regEx('^git@(?<hostName>[^:]+):(?<depName>\\\\S*)'),\n  ];\n  for (const urlMatcher of urlMatchers) {\n    const match = urlMatcher.exec(repository);\n    if (match) {\n      const { hostName, depName } = match.groups;\n      const sourceDef = determineDatasource(repository, hostName);\n      return {\n        ...sourceDef,\n        depName,\n        depType: 'repository',\n        lookupName: depName,\n        currentValue: tag,\n      };\n    }\n  }\n  logger.info(\n    { repository },\n    'Could not separate hostname from full dependency url.'\n  );\n  return {\n    depName: undefined,\n    depType: 'repository',\n    datasource: undefined,\n    lookupName: undefined,\n    skipReason: SkipReason.InvalidUrl,\n    currentValue: tag,\n  };\n}\n\n/**\n * Find all supported dependencies in the pre-commit yaml object.\n *\n * @param precommitFile the parsed yaml config file\n */\nfunction findDependencies(\n  precommitFile: PreCommitConfig\n): Array<PackageDependency> {\n  if (!precommitFile.repos) {\n    logger.debug(`No repos section found, skipping file`);\n    return [];\n  }\n  const packageDependencies = [];\n  precommitFile.repos.forEach((item) => {\n    if (matchesPrecommitDependencyHeuristic(item)) {\n      logger.trace(item, 'Matched pre-commit dependency spec');\n      const repository = String(item.repo);\n      const tag = String(item.rev);\n      const dep = extractDependency(tag, repository);\n\n      packageDependencies.push(dep);\n    } else {\n      logger.trace(item, 'Did not find pre-commit repo spec');\n    }\n  });\n  return packageDependencies;\n}\n\nexport function extractPackageFile(\n  content: string,\n  filename: string\n): PackageFile | null {\n  let parsedContent: Record<string, unknown> | PreCommitConfig;\n  try {\n    parsedContent = yaml.safeLoad(content, { json: true }) as any;\n  } catch (err) {\n    logger.debug({ filename, err }, 'Failed to parse pre-commit config YAML');\n    return null;\n  }\n  if (!is.plainObject<Record<string, unknown>>(parsedContent)) {\n    logger.warn(\n      { filename },\n      `Parsing of pre-commit config YAML returned invalid result`\n    );\n    return null;\n  }\n  if (!matchesPrecommitConfigHeuristic(parsedContent)) {\n    logger.debug(\n      { filename },\n      `File does not look like a pre-commit config file`\n    );\n    return null;\n  }\n  try {\n    const deps = findDependencies(parsedContent);\n    if (deps.length) {\n      logger.trace({ deps }, 'Found dependencies in pre-commit config');\n      return { deps };\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ filename, err }, 'Error scanning parsed pre-commit config');\n  }\n  return null;\n}\n"]}