{"version":3,"file":"node-version.js","sourceRoot":"","sources":["../../../../lib/manager/npm/post-update/node-version.ts"],"names":[],"mappings":";;;AAAA,mCAA+C;AAC/C,4CAAyC;AACzC,yCAAqE;AACrE,mDAAoD;AAGpD,KAAK,UAAU,WAAW,CAAC,QAAgB;IACzC,IAAI;QACF,MAAM,UAAU,GAAG,CAAC,MAAM,kBAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;aACvD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACd,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACrB,IAAI,mBAAU,CAAC,UAAU,CAAC,EAAE;YAC1B,eAAM,CAAC,KAAK,CAAC,0BAA0B,UAAU,UAAU,QAAQ,EAAE,CAAC,CAAC;YACvE,OAAO,UAAU,CAAC;SACnB;KACF;IAAC,OAAO,GAAG,EAAE;QACZ,aAAa;KACd;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,wBAAwB,CAAC,MAAwB;;IACxD,MAAM,UAAU,SAAW,MAAM,CAAC,WAAW,0CAAE,IAAI,CAAC;IACpD,IAAI,UAAU,IAAI,mBAAU,CAAC,UAAU,CAAC,EAAE;QACxC,eAAM,CAAC,KAAK,CAAC,0BAA0B,UAAU,qBAAqB,CAAC,CAAC;QACxE,OAAO,UAAU,CAAC;KACnB;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,iBAAiB,CACrC,MAAwB;IAExB,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;IAC/B,IAAI,UAAU,GACZ,CAAC,MAAM,WAAW,CAAC,uBAAkB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC9D,CAAC,MAAM,WAAW,CAAC,uBAAkB,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC;QACrE,wBAAwB,CAAC,MAAM,CAAC,CAAC;IACnC,oEAAoE;IACpE,kCAAkC;IAClC,IAAI,UAAU,EAAE;QACd,IACE,mBAAU,CAAC,UAAU,CAAC;YACtB,kBAAS,CAAC,UAAU,EAAE,UAAU,CAAC;YACjC,kBAAS,CAAC,UAAU,EAAE,UAAU,CAAC;YACjC,CAAC,eAAQ,CAAC,UAAU,CAAC,IAAI,qDAAqD;YAC9E,mBAAU,CAAC,GAAG,UAAU,MAAM,CAAC,EAC/B;YACA,eAAM,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;YACvD,UAAU,GAAG,GAAG,UAAU,MAAM,CAAC;SAClC;KACF;SAAM;QACL,eAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;KACzD;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAzBD,8CAyBC","sourcesContent":["import { satisfies, validRange } from 'semver';\nimport { logger } from '../../../logger';\nimport { getSiblingFileName, readLocalFile } from '../../../util/fs';\nimport { isStable } from '../../../versioning/node';\nimport { PostUpdateConfig } from '../../common';\n\nasync function getNodeFile(filename: string): Promise<string> | null {\n  try {\n    const constraint = (await readLocalFile(filename, 'utf8'))\n      .split('\\n')[0]\n      .replace(/^v/, '');\n    if (validRange(constraint)) {\n      logger.debug(`Using node constraint \"${constraint}\" from ${filename}`);\n      return constraint;\n    }\n  } catch (err) {\n    // do nothing\n  }\n  return null;\n}\n\nfunction getPackageJsonConstraint(config: PostUpdateConfig): string | null {\n  const constraint: string = config.constraints?.node;\n  if (constraint && validRange(constraint)) {\n    logger.debug(`Using node constraint \"${constraint}\" from package.json`);\n    return constraint;\n  }\n  return null;\n}\n\nexport async function getNodeConstraint(\n  config: PostUpdateConfig\n): Promise<string> | null {\n  const { packageFile } = config;\n  let constraint =\n    (await getNodeFile(getSiblingFileName(packageFile, '.nvmrc'))) ||\n    (await getNodeFile(getSiblingFileName(packageFile, '.node-version'))) ||\n    getPackageJsonConstraint(config);\n  // Avoid using node 15 if node 14 also satisfies the same constraint\n  // Remove this once node 16 is LTS\n  if (constraint) {\n    if (\n      validRange(constraint) &&\n      satisfies('14.100.0', constraint) &&\n      satisfies('15.100.0', constraint) &&\n      !isStable('16.100.0') && // this should return false as soon as Node 16 is LTS\n      validRange(`${constraint} <15`)\n    ) {\n      logger.debug('Augmenting constraint to avoid node 15');\n      constraint = `${constraint} <15`;\n    }\n  } else {\n    logger.debug('No node constraint found - using latest');\n  }\n  return constraint;\n}\n"]}