{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/setup-cfg/extract.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAyD;AACzD,qEAA6C;AAG7C,SAAS,cAAc,CAAC,GAAW;IACjC,MAAM,CAAC,EAAE,WAAW,CAAC,GAAG,wBAAwB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACjE,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,SAAS,gBAAgB,CAAC,GAAW;IACnC,MAAM,CAAC,EAAE,aAAa,CAAC,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IAC1D,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,SAAS,UAAU,CAAC,OAAe,EAAE,MAAc;IACjD,IAAI,OAAO,KAAK,SAAS,EAAE;QACzB,IAAI,MAAM,KAAK,kBAAkB,EAAE;YACjC,OAAO,SAAS,CAAC;SAClB;QACD,IAAI,MAAM,KAAK,gBAAgB,EAAE;YAC/B,OAAO,OAAO,CAAC;SAChB;QACD,IAAI,MAAM,KAAK,eAAe,EAAE;YAC9B,OAAO,MAAM,CAAC;SACf;KACF;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,QAAQ,CACf,IAAY,EACZ,OAAe,EACf,MAAc;IAEd,MAAM,CAAC,EAAE,OAAO,EAAE,YAAY,CAAC,GAC7B,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IAChD,IACE,OAAO;QACP,MAAM;QACN,OAAO;QACP,YAAY;QACZ,gBAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAC5B;QACA,MAAM,GAAG,GAAsB,EAAE,UAAU,EAAV,SAAU,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;QACrE,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC5C,IAAI,OAAO,EAAE;YACX,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;SACvB;QACD,OAAO,GAAG,CAAC;KACZ;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAgB,kBAAkB,CAChC,OAAe;IAEf,IAAI,WAAW,GAAG,IAAI,CAAC;IACvB,IAAI,aAAa,GAAG,IAAI,CAAC;IAEzB,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,OAAO;SACJ,KAAK,CAAC,IAAI,CAAC;SACX,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;SACtD,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QACnB,IAAI,IAAI,GAAG,OAAO,CAAC;QACnB,MAAM,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;QAC5C,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAChD,IAAI,cAAc,EAAE;YAClB,WAAW,GAAG,cAAc,CAAC;SAC9B;aAAM;YACL,IAAI,gBAAgB,EAAE;gBACpB,aAAa,GAAG,gBAAgB,CAAC;gBACjC,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;aAC5C;YACD,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;YACvD,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAChB;SACF;IACH,CAAC,CAAC,CAAC;IAEL,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AAC3C,CAAC;AA7BD,gDA6BC","sourcesContent":["import { id as datasource } from '../../datasource/pypi';\nimport pep440 from '../../versioning/pep440';\nimport { PackageDependency, PackageFile, Result } from '../common';\n\nfunction getSectionName(str: string): string {\n  const [, sectionName] = /^\\[\\s*([^\\s]+)\\s*]\\s*$/.exec(str) || [];\n  return sectionName;\n}\n\nfunction getSectionRecord(str: string): string {\n  const [, sectionRecord] = /^([^\\s]+)\\s+=/.exec(str) || [];\n  return sectionRecord;\n}\n\nfunction getDepType(section: string, record: string): null | string {\n  if (section === 'options') {\n    if (record === 'install_requires') {\n      return 'install';\n    }\n    if (record === 'setup_requires') {\n      return 'setup';\n    }\n    if (record === 'tests_require') {\n      return 'test';\n    }\n  }\n  return 'extra';\n}\n\nfunction parseDep(\n  line: string,\n  section: string,\n  record: string\n): PackageDependency | null {\n  const [, depName, currentValue] =\n    /\\s+([-_a-zA-Z0-9]*)\\s*(.*)/.exec(line) || [];\n  if (\n    section &&\n    record &&\n    depName &&\n    currentValue &&\n    pep440.isValid(currentValue)\n  ) {\n    const dep: PackageDependency = { datasource, depName, currentValue };\n    const depType = getDepType(section, record);\n    if (depType) {\n      dep.depType = depType;\n    }\n    return dep;\n  }\n  return null;\n}\n\nexport function extractPackageFile(\n  content: string\n): Result<PackageFile | null> {\n  let sectionName = null;\n  let sectionRecord = null;\n\n  const deps: PackageDependency[] = [];\n  content\n    .split('\\n')\n    .map((line) => line.replace(/[;#].*$/, '').trimRight())\n    .forEach((rawLine) => {\n      let line = rawLine;\n      const newSectionName = getSectionName(line);\n      const newSectionRecord = getSectionRecord(line);\n      if (newSectionName) {\n        sectionName = newSectionName;\n      } else {\n        if (newSectionRecord) {\n          sectionRecord = newSectionRecord;\n          line = rawLine.replace(/^[^=]*=\\s*/, '\\t');\n        }\n        const dep = parseDep(line, sectionName, sectionRecord);\n        if (dep) {\n          deps.push(dep);\n        }\n      }\n    });\n\n  return deps.length > 0 ? { deps } : null;\n}\n"]}