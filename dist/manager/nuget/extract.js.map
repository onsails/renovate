{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/nuget/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { XmlDocument } from 'xmldoc';\nimport * as datasourceNuget from '../../datasource/nuget';\nimport { logger } from '../../logger';\nimport { ExtractConfig, PackageDependency, PackageFile } from '../common';\nimport { DotnetToolsManifest } from './types';\nimport { getConfiguredRegistries } from './util';\n\n/**\n * https://docs.microsoft.com/en-us/nuget/concepts/package-versioning\n * This article mentions that  Nuget 3.x and later tries to restore the lowest possible version\n * regarding to given version range.\n * 1.3.4 equals [1.3.4,)\n * Due to guarantee that an update of package version will result in its usage by the next restore + build operation,\n * only following constrained versions make sense\n * 1.3.4, [1.3.4], [1.3.4, ], [1.3.4, )\n * The update of the right boundary does not make sense regarding to the lowest version restore rule,\n * so we don't include it in the extracting regexp\n */\nconst checkVersion = /^\\s*(?:[[])?(?:(?<currentValue>[^\"(,[\\]]+)\\s*(?:,\\s*[)\\]]|])?)\\s*$/;\n\nfunction extractDepsFromXml(xmlNode: XmlDocument): PackageDependency[] {\n  const results = [];\n  const itemGroups = xmlNode.childrenNamed('ItemGroup');\n  for (const itemGroup of itemGroups) {\n    const relevantChildren = [\n      ...itemGroup.childrenNamed('PackageReference'),\n      ...itemGroup.childrenNamed('PackageVersion'),\n      ...itemGroup.childrenNamed('DotNetCliToolReference'),\n      ...itemGroup.childrenNamed('GlobalPackageReference'),\n    ];\n    for (const child of relevantChildren) {\n      const { attr } = child;\n      const depName = attr?.Include || attr?.Update;\n      const version =\n        attr?.Version ||\n        child.valueWithPath('Version') ||\n        attr?.VersionOverride ||\n        child.valueWithPath('VersionOverride');\n      const currentValue = checkVersion\n        ?.exec(version)\n        ?.groups?.currentValue?.trim();\n      if (depName && currentValue) {\n        results.push({\n          datasource: datasourceNuget.id,\n          depType: 'nuget',\n          depName,\n          currentValue,\n        });\n      }\n    }\n  }\n  return results;\n}\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig\n): Promise<PackageFile | null> {\n  logger.trace({ packageFile }, 'nuget.extractPackageFile()');\n\n  const registries = await getConfiguredRegistries(\n    packageFile,\n    config.localDir\n  );\n  const registryUrls = registries\n    ? registries.map((registry) => registry.url)\n    : undefined;\n\n  if (packageFile.endsWith('.config/dotnet-tools.json')) {\n    const deps: PackageDependency[] = [];\n    let manifest: DotnetToolsManifest;\n\n    try {\n      manifest = JSON.parse(content);\n    } catch (err) {\n      logger.debug({ fileName: packageFile }, 'Invalid JSON');\n      return null;\n    }\n\n    if (manifest.version !== 1) {\n      logger.debug({ contents: manifest }, 'Unsupported dotnet tools version');\n      return null;\n    }\n\n    for (const depName of Object.keys(manifest.tools)) {\n      const tool = manifest.tools[depName];\n      const currentValue = tool.version;\n      const dep: PackageDependency = {\n        depType: 'nuget',\n        depName,\n        currentValue,\n        datasource: datasourceNuget.id,\n      };\n      if (registryUrls) {\n        dep.registryUrls = registryUrls;\n      }\n\n      deps.push(dep);\n    }\n\n    return { deps };\n  }\n\n  let deps: PackageDependency[] = [];\n  try {\n    const parsedXml = new XmlDocument(content);\n    deps = extractDepsFromXml(parsedXml).map((dep) => ({\n      ...dep,\n      ...(registryUrls && { registryUrls }),\n    }));\n    return { deps };\n  } catch (err) {\n    logger.debug({ err }, `Failed to parse ${packageFile}`);\n  }\n  return { deps };\n}\n"]}