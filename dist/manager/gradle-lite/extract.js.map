{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/gradle-lite/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import * as upath from 'upath';\nimport * as datasourceMaven from '../../datasource/maven';\nimport { logger } from '../../logger';\nimport { readLocalFile } from '../../util/fs';\nimport { ExtractConfig, PackageDependency, PackageFile } from '../common';\nimport { ManagerData, VariableRegistry } from './common';\nimport { parseGradle, parseProps } from './parser';\nimport {\n  getVars,\n  isGradleFile,\n  isPropsFile,\n  reorderFiles,\n  toAbsolutePath,\n} from './utils';\n\n// Enables reverse sorting in generateBranchConfig()\n//\n// Required for grouped dependencies to be upgraded\n// correctly in single branch.\n//\n// https://github.com/renovatebot/renovate/issues/8224\nfunction elevateFileReplacePositionField(\n  deps: PackageDependency<ManagerData>[]\n): PackageDependency<ManagerData>[] {\n  return deps.map((dep) => ({\n    ...dep,\n    fileReplacePosition: dep?.managerData?.fileReplacePosition,\n  }));\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[]\n): Promise<PackageFile[] | null> {\n  const extractedDeps: PackageDependency<ManagerData>[] = [];\n  const registry: VariableRegistry = {};\n  const packageFilesByName: Record<string, PackageFile> = {};\n  const registryUrls = [];\n  for (const packageFile of reorderFiles(packageFiles)) {\n    packageFilesByName[packageFile] = {\n      packageFile,\n      datasource: datasourceMaven.id,\n      deps: [],\n    };\n\n    try {\n      const content = await readLocalFile(packageFile, 'utf8');\n      const dir = upath.dirname(toAbsolutePath(packageFile));\n      if (isPropsFile(packageFile)) {\n        const { vars, deps } = parseProps(content, packageFile);\n        registry[dir] = vars;\n        extractedDeps.push(...deps);\n      } else if (isGradleFile(packageFile)) {\n        const vars = getVars(registry, dir);\n        const { deps, urls } = parseGradle(content, vars, packageFile);\n        urls.forEach((url) => {\n          if (!registryUrls.includes(url)) {\n            registryUrls.push(url);\n          }\n        });\n        extractedDeps.push(...deps);\n      }\n    } catch (e) {\n      logger.warn(\n        { config, packageFile },\n        `Failed to process Gradle file: ${packageFile}`\n      );\n    }\n  }\n\n  if (!extractedDeps.length) {\n    return null;\n  }\n\n  elevateFileReplacePositionField(extractedDeps).forEach((dep) => {\n    const key = dep.managerData.packageFile;\n    const pkgFile: PackageFile = packageFilesByName[key];\n    const { deps } = pkgFile;\n    deps.push({\n      ...dep,\n      registryUrls: [...(dep.registryUrls || []), ...registryUrls],\n    });\n    packageFilesByName[key] = pkgFile;\n  });\n\n  return Object.values(packageFilesByName);\n}\n"]}