{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../lib/manager/gradle-lite/common.ts"],"names":[],"mappings":";;;AAEA,wDAA2D;AAAlD,oGAAA,UAAU,OAAA;AAEN,QAAA,YAAY,GAAG,8BAA8B,CAAC;AAC9C,QAAA,WAAW,GAAG,uCAAuC,CAAC;AAenE,IAAY,SA4CX;AA5CD,WAAY,SAAS;IACnB,4BAAe,CAAA;IACf,wCAA2B,CAAA;IAC3B,0CAA6B,CAAA;IAC7B,gCAAmB,CAAA;IAEnB,oCAAuB,CAAA;IACvB,4BAAe,CAAA;IACf,wBAAW,CAAA;IACX,4BAAe,CAAA;IACf,kCAAqB,CAAA;IAErB,sCAAyB,CAAA;IAEzB,0BAAa,CAAA;IAEb,oCAAuB,CAAA;IACvB,sCAAyB,CAAA;IAEzB,wCAA2B,CAAA;IAC3B,0CAA6B,CAAA;IAE7B,oCAAuB,CAAA;IACvB,sCAAyB,CAAA;IAEzB,oDAAuC,CAAA;IACvC,sDAAyC,CAAA;IAEzC,oDAAuC,CAAA;IACvC,kDAAqC,CAAA;IACrC,+DAAkD,CAAA;IAClD,kCAAqB,CAAA;IACrB,sDAAyC,CAAA;IAEzC,0DAA6C,CAAA;IAC7C,gEAAmD,CAAA;IACnD,sDAAyC,CAAA;IAEzC,0BAAa,CAAA;IACb,wCAA2B,CAAA;IAC3B,8BAAiB,CAAA;IAEjB,0CAA6B,CAAA;IAC7B,gDAAmC,CAAA;AACrC,CAAC,EA5CW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QA4CpB","sourcesContent":["import { PackageDependency } from '../common';\n\nexport { MAVEN_REPO } from '../../datasource/maven/common';\n\nexport const JCENTER_REPO = 'https://jcenter.bintray.com/';\nexport const GOOGLE_REPO = 'https://dl.google.com/android/maven2/';\n\nexport interface ManagerData {\n  fileReplacePosition: number;\n  packageFile?: string;\n}\n\nexport interface VariableData extends ManagerData {\n  key: string;\n  value: string;\n}\n\nexport type PackageVariables = Record<string, VariableData>;\nexport type VariableRegistry = Record<string, PackageVariables>;\n\nexport enum TokenType {\n  Space = 'space',\n  LineComment = 'lineComment',\n  MultiComment = 'multiComment',\n  Newline = 'newline',\n\n  Semicolon = 'semicolon',\n  Colon = 'colon',\n  Dot = 'dot',\n  Comma = 'comma',\n  Operator = 'operator',\n\n  Assignment = 'assignment',\n\n  Word = 'word',\n\n  LeftParen = 'leftParen',\n  RightParen = 'rightParen',\n\n  LeftBracket = 'leftBracket',\n  RightBracket = 'rightBracket',\n\n  LeftBrace = 'leftBrace',\n  RightBrace = 'rightBrace',\n\n  SingleQuotedStart = 'singleQuotedStart',\n  SingleQuotedFinish = 'singleQuotedFinish',\n\n  DoubleQuotedStart = 'doubleQuotedStart',\n  StringInterpolation = 'interpolation',\n  IgnoredInterpolationStart = 'ignoredInterpolation',\n  Variable = 'variable',\n  DoubleQuotedFinish = 'doubleQuotedFinish',\n\n  TripleSingleQuotedStart = 'tripleQuotedStart',\n  TripleDoubleQuotedStart = 'tripleDoubleQuotedStart',\n  TripleQuotedFinish = 'tripleQuotedFinish',\n\n  Char = 'char',\n  EscapedChar = 'escapedChar',\n  String = 'string',\n\n  UnknownLexeme = 'unknownChar',\n  UnknownFragment = 'unknownFragment',\n}\n\nexport interface Token {\n  type: TokenType;\n  value: string;\n  offset: number;\n}\n\nexport interface StringInterpolation extends Token {\n  type: TokenType.StringInterpolation;\n  children: Token[]; // Tokens inside double-quoted string that are subject of interpolation\n  isComplete: boolean; // True if token has parsed completely\n  isValid: boolean; // False if string contains something unprocessable\n}\n\n// Matcher on single token\nexport interface SyntaxMatcher {\n  matchType: TokenType | TokenType[];\n  matchValue?: string | string[];\n  lookahead?: boolean;\n  tokenMapKey?: string;\n}\n\nexport type TokenMap = Record<string, Token>;\n\nexport interface SyntaxHandlerInput {\n  packageFile: string;\n  variables: PackageVariables;\n  tokenMap: TokenMap;\n}\n\nexport type SyntaxHandlerOutput = {\n  deps?: PackageDependency<ManagerData>[];\n  vars?: PackageVariables;\n  urls?: string[];\n} | null;\n\nexport interface SyntaxMatchConfig {\n  matchers: SyntaxMatcher[];\n  handler: (MatcherHandlerInput) => SyntaxHandlerOutput;\n}\n"]}