{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/github-releases/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,uEAAyD;AACzD,mDAAoD;AACpD,wCAAqD;AAGxC,QAAA,EAAE,GAAG,iBAAiB,CAAC;AACvB,QAAA,mBAAmB,GAAG,CAAC,oBAAoB,CAAC,CAAC;AAC7C,QAAA,gBAAgB,GAAG,OAAO,CAAC;AAExC,MAAM,cAAc,GAAG,4BAA4B,CAAC;AAEpD,MAAM,IAAI,GAAG,IAAI,mBAAU,EAAE,CAAC;AAE9B,SAAS,WAAW,CAAC,OAAe,EAAE,IAAY;IAChD,MAAM,IAAI,GAAG,MAAM,CAAC;IACpB,OAAO,GAAG,OAAO,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AACtC,CAAC;AAQD;;;;;;;;;GASG;AACI,KAAK,UAAU,WAAW,CAAC,EAChC,UAAU,EAAE,IAAI,EAChB,WAAW,GACO;IAClB,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,GAAG,CACzC,cAAc,EACd,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAC/B,CAAC;IACF,qBAAqB;IACrB,IAAI,YAAY,EAAE;QAChB,OAAO,YAAY,CAAC;KACrB;IACD,qDAAqD;IACrD,MAAM,aAAa,GAAG,yBAAmB,CACvC,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,qBAAqB,CACrC,CAAC;IACF,MAAM,UAAU,GACd,aAAa,KAAK,qBAAqB;QACrC,CAAC,CAAC,GAAG,aAAa,SAAS;QAC3B,CAAC,CAAC,yBAAyB,CAAC;IAEhC,MAAM,GAAG,GAAG,GAAG,UAAU,SAAS,IAAI,wBAAwB,CAAC;IAC/D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAkB,GAAG,EAAE;QACnD,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;IACH,MAAM,cAAc,GAAG,GAAG,CAAC,IAAI,CAAC;IAChC,MAAM,UAAU,GAAkB;QAChC,SAAS,EAAE,GAAG,aAAa,GAAG,IAAI,EAAE;QACpC,QAAQ,EAAE,IAAI;KACf,CAAC;IACF,UAAU,CAAC,QAAQ,GAAG,cAAc,CAAC,GAAG,CACtC,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;QAC3C,OAAO,EAAE,QAAQ;QACjB,MAAM,EAAE,QAAQ;QAChB,gBAAgB,EAAE,YAAY;QAC9B,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;KACzC,CAAC,CACH,CAAC;IACF,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,MAAM,YAAY,CAAC,GAAG,CACpB,cAAc,EACd,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,EAC9B,UAAU,EACV,YAAY,CACb,CAAC;IACF,OAAO,UAAU,CAAC;AACpB,CAAC;AA9CD,kCA8CC","sourcesContent":["import * as packageCache from '../../util/cache/package';\nimport { GithubHttp } from '../../util/http/github';\nimport { ensureTrailingSlash } from '../../util/url';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\n\nexport const id = 'github-releases';\nexport const defaultRegistryUrls = ['https://github.com'];\nexport const registryStrategy = 'first';\n\nconst cacheNamespace = 'datasource-github-releases';\n\nconst http = new GithubHttp();\n\nfunction getCacheKey(depHost: string, repo: string): string {\n  const type = 'tags';\n  return `${depHost}:${repo}:${type}`;\n}\n\ntype GithubRelease = {\n  tag_name: string;\n  published_at: string;\n  prerelease: boolean;\n};\n\n/**\n * github.getReleases\n *\n * This function can be used to fetch releases with a customisable versioning (e.g. semver) and with releases.\n *\n * This function will:\n *  - Fetch all releases\n *  - Sanitize the versions if desired (e.g. strip out leading 'v')\n *  - Return a dependency object containing sourceUrl string and releases array\n */\nexport async function getReleases({\n  lookupName: repo,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    getCacheKey(registryUrl, repo)\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n  // default to GitHub.com if no GHE host is specified.\n  const sourceUrlBase = ensureTrailingSlash(\n    registryUrl ?? 'https://github.com/'\n  );\n  const apiBaseUrl =\n    sourceUrlBase !== 'https://github.com/'\n      ? `${sourceUrlBase}api/v3/`\n      : `https://api.github.com/`;\n\n  const url = `${apiBaseUrl}repos/${repo}/releases?per_page=100`;\n  const res = await http.getJson<GithubRelease[]>(url, {\n    paginate: true,\n  });\n  const githubReleases = res.body;\n  const dependency: ReleaseResult = {\n    sourceUrl: `${sourceUrlBase}${repo}`,\n    releases: null,\n  };\n  dependency.releases = githubReleases.map(\n    ({ tag_name, published_at, prerelease }) => ({\n      version: tag_name,\n      gitRef: tag_name,\n      releaseTimestamp: published_at,\n      isStable: prerelease ? false : undefined,\n    })\n  );\n  const cacheMinutes = 10;\n  await packageCache.set(\n    cacheNamespace,\n    getCacheKey(registryUrl, repo),\n    dependency,\n    cacheMinutes\n  );\n  return dependency;\n}\n"]}