{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/galaxy/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as packageCache from '../../util/cache/package';\nimport { Http } from '../../util/http';\nimport { GetReleasesConfig, Release, ReleaseResult } from '../common';\n\nexport const id = 'galaxy';\n\nconst http = new Http(id);\n\nexport async function getReleases({\n  lookupName,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const cacheNamespace = 'datasource-galaxy';\n  const cacheKey = lookupName;\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    cacheKey\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  const lookUp = lookupName.split('.');\n  const userName = lookUp[0];\n  const projectName = lookUp[1];\n\n  const baseUrl = 'https://galaxy.ansible.com/';\n  const galaxyAPIUrl =\n    baseUrl +\n    'api/v1/roles/?owner__username=' +\n    userName +\n    '&name=' +\n    projectName;\n  const galaxyProjectUrl = baseUrl + userName + '/' + projectName;\n  try {\n    let res: any = await http.get(galaxyAPIUrl);\n    if (!res || !res.body) {\n      logger.warn(\n        { dependency: lookupName },\n        `Received invalid data from ${galaxyAPIUrl}`\n      );\n      return null;\n    }\n\n    res = res.body;\n    const response = JSON.parse(res);\n\n    // istanbul ignore if\n    if (response.results.length > 1) {\n      logger.warn(\n        { dependency: lookupName },\n        `Received multiple results from ${galaxyAPIUrl}`\n      );\n      return null;\n    }\n    if (response.results.length === 0) {\n      logger.info(\n        { dependency: lookupName },\n        `Received no results from ${galaxyAPIUrl}`\n      );\n      return null;\n    }\n\n    const resultObject = response.results[0];\n    const versions = resultObject.summary_fields.versions;\n\n    const result: ReleaseResult = {\n      releases: [],\n    };\n\n    result.dependencyUrl = galaxyProjectUrl;\n    const { github_user: user = null, github_repo: repo = null } = resultObject;\n    if (typeof user === 'string' && typeof repo === 'string') {\n      result.sourceUrl = `https://github.com/${user}/${repo}`;\n    }\n\n    result.releases = versions.map(\n      (version: { name: string; release_date: string }) => {\n        const release: Release = {\n          version: version.name,\n          releaseTimestamp: version.release_date,\n        };\n\n        return release;\n      }\n    );\n    const cacheMinutes = 10;\n    await packageCache.set(cacheNamespace, cacheKey, result, cacheMinutes);\n    return result;\n  } catch (err) {\n    if (\n      err.statusCode === 429 ||\n      (err.statusCode >= 500 && err.statusCode < 600)\n    ) {\n      throw new ExternalHostError(err);\n    }\n    throw err;\n  }\n}\n"]}