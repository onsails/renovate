{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/nuget/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAyB;AACzB,yCAAsC;AAEtC,yCAA2B;AAC3B,yCAA2B;AAE3B,mCAA8B;AAArB,4FAAA,EAAE,OAAA;AAEE,QAAA,mBAAmB,GAAG,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,CAAC;AAC5C,QAAA,gBAAgB,GAAG,OAAO,CAAC;AAExC,SAAS,gBAAgB,CACvB,WAAmB;IAEnB,IAAI;QACF,MAAM,SAAS,GAAG,aAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC5C,IAAI,eAAe,GAAG,CAAC,CAAC;QACxB,MAAM,qBAAqB,GAAG,wBAAwB,CAAC;QACvD,MAAM,oBAAoB,GAAG,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACxE,IAAI,oBAAoB,EAAE;YACxB,SAAS,CAAC,IAAI,GAAG,EAAE,CAAC;YACpB,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SAChE;aAAM,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC/C,eAAe,GAAG,CAAC,CAAC;SACrB;QACD,OAAO,EAAE,OAAO,EAAE,aAAM,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,eAAe,EAAE,CAAC;KAC/D;IAAC,OAAO,GAAG,EAAE;QACZ,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,uCAAuC,WAAW,EAAE,CAAC,CAAC;QAC5E,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;KACxD;AACH,CAAC;AAEM,KAAK,UAAU,WAAW,CAAC,EAChC,UAAU,EACV,WAAW,GACO;IAClB,eAAM,CAAC,KAAK,CAAC,qBAAqB,UAAU,GAAG,CAAC,CAAC;IACjD,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;IACnE,IAAI,eAAe,KAAK,CAAC,EAAE;QACzB,OAAO,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;KAC5C;IACD,IAAI,eAAe,KAAK,CAAC,EAAE;QACzB,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,QAAQ,EAAE;YACZ,OAAO,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;SACtD;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAhBD,kCAgBC","sourcesContent":["import urlApi from 'url';\nimport { logger } from '../../logger';\nimport { GetReleasesConfig, ReleaseResult } from '../common';\nimport * as v2 from './v2';\nimport * as v3 from './v3';\n\nexport { id } from './common';\n\nexport const defaultRegistryUrls = [v3.getDefaultFeed()];\nexport const registryStrategy = 'merge';\n\nfunction parseRegistryUrl(\n  registryUrl: string\n): { feedUrl: string; protocolVersion: number } {\n  try {\n    const parsedUrl = urlApi.parse(registryUrl);\n    let protocolVersion = 2;\n    const protocolVersionRegExp = /#protocolVersion=(2|3)/;\n    const protocolVersionMatch = protocolVersionRegExp.exec(parsedUrl.hash);\n    if (protocolVersionMatch) {\n      parsedUrl.hash = '';\n      protocolVersion = Number.parseInt(protocolVersionMatch[1], 10);\n    } else if (parsedUrl.pathname.endsWith('.json')) {\n      protocolVersion = 3;\n    }\n    return { feedUrl: urlApi.format(parsedUrl), protocolVersion };\n  } catch (err) {\n    logger.debug({ err }, `nuget registry failure: can't parse ${registryUrl}`);\n    return { feedUrl: registryUrl, protocolVersion: null };\n  }\n}\n\nexport async function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult> {\n  logger.trace(`nuget.getReleases(${lookupName})`);\n  const { feedUrl, protocolVersion } = parseRegistryUrl(registryUrl);\n  if (protocolVersion === 2) {\n    return v2.getReleases(feedUrl, lookupName);\n  }\n  if (protocolVersion === 3) {\n    const queryUrl = await v3.getResourceUrl(feedUrl);\n    if (queryUrl) {\n      return v3.getReleases(feedUrl, queryUrl, lookupName);\n    }\n  }\n  return null;\n}\n"]}