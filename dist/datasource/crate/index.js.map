{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/crate/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as packageCache from '../../util/cache/package';\nimport { Http } from '../../util/http';\nimport { GetReleasesConfig, Release, ReleaseResult } from '../common';\n\nexport const id = 'crate';\n\nconst http = new Http(id);\n\nconst BASE_URL =\n  'https://raw.githubusercontent.com/rust-lang/crates.io-index/master/';\n\nexport function getIndexSuffix(lookupName: string): string {\n  const len = lookupName.length;\n\n  if (len === 1) {\n    return '1/' + lookupName;\n  }\n  if (len === 2) {\n    return '2/' + lookupName;\n  }\n  if (len === 3) {\n    return '3/' + lookupName[0] + '/' + lookupName;\n  }\n\n  return (\n    lookupName.slice(0, 2) + '/' + lookupName.slice(2, 4) + '/' + lookupName\n  );\n}\n\ninterface CrateRecord {\n  vers: string;\n  yanked: boolean;\n}\n\nexport async function getReleases({\n  lookupName,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const cacheNamespace = 'datasource-crate';\n  const cacheKey = lookupName;\n  const cachedResult = await packageCache.get<ReleaseResult>(\n    cacheNamespace,\n    cacheKey\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  const crateUrl = BASE_URL + getIndexSuffix(lookupName);\n  const dependencyUrl = `https://crates.io/crates/${lookupName}`;\n  try {\n    const lines = (await http.get(crateUrl)).body\n      .split('\\n') // break into lines\n      .map((line) => line.trim()) // remove whitespace\n      .filter((line) => line.length !== 0) // remove empty lines\n      .map((line) => JSON.parse(line) as CrateRecord); // parse\n    const result: ReleaseResult = {\n      dependencyUrl,\n      releases: [],\n    };\n    result.releases = lines\n      .map((version) => {\n        const release: Release = {\n          version: version.vers,\n        };\n        if (version.yanked) {\n          release.isDeprecated = true;\n        }\n        return release;\n      })\n      .filter((release) => release.version);\n    if (!result.releases.length) {\n      return null;\n    }\n    const cacheMinutes = 10;\n    await packageCache.set(cacheNamespace, cacheKey, result, cacheMinutes);\n    return result;\n  } catch (err) {\n    if (\n      err.statusCode === 429 ||\n      (err.statusCode >= 500 && err.statusCode < 600)\n    ) {\n      throw new ExternalHostError(err);\n    }\n    throw err;\n  }\n}\n"]}