{"version":3,"file":"get.js","sourceRoot":"","sources":["../../../lib/datasource/rubygems/get.ts"],"names":[],"mappings":"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","sourcesContent":["import { OutgoingHttpHeaders } from 'http';\nimport urlJoin from 'url-join';\nimport { logger } from '../../logger';\nimport { Http } from '../../util/http';\nimport { ReleaseResult } from '../common';\nimport { id } from './common';\n\nconst http = new Http(id);\n\nconst INFO_PATH = '/api/v1/gems';\nconst VERSIONS_PATH = '/api/v1/versions';\n\nconst getHeaders = (): OutgoingHttpHeaders => ({ hostType: id });\n\nexport async function fetch(\n  dependency: string,\n  registry: string,\n  path: string\n): Promise<any> {\n  const headers = getHeaders();\n\n  const url = urlJoin(registry, path, `${dependency}.json`);\n\n  logger.trace({ dependency }, `RubyGems lookup request: ${String(url)}`);\n  const response = (await http.getJson(url, { headers })) || {\n    body: undefined,\n  };\n\n  return response.body;\n}\n\nexport async function getDependency(\n  dependency: string,\n  registry: string\n): Promise<ReleaseResult | null> {\n  logger.debug({ dependency }, 'RubyGems lookup for dependency');\n  const info = await fetch(dependency, registry, INFO_PATH);\n  if (!info) {\n    logger.debug({ dependency }, 'RubyGems package not found.');\n    return null;\n  }\n\n  if (dependency.toLowerCase() !== info.name.toLowerCase()) {\n    logger.warn(\n      { lookup: dependency, returned: info.name },\n      'Lookup name does not match with returned.'\n    );\n    return null;\n  }\n\n  let versions = [];\n  let releases = [];\n  try {\n    versions = await fetch(dependency, registry, VERSIONS_PATH);\n  } catch (err) {\n    if (err.statusCode === 400 || err.statusCode === 404) {\n      logger.debug(\n        { registry },\n        'versions endpoint returns error - falling back to info endpoint'\n      );\n    } else {\n      throw err;\n    }\n  }\n\n  if (versions.length === 0 && info.version) {\n    logger.warn('falling back to the version from the info endpoint');\n    releases = [\n      {\n        version: info.version,\n        rubyPlatform: info.platform,\n      },\n    ];\n  } else {\n    releases = versions.map(\n      ({\n        number: version,\n        platform: rubyPlatform,\n        created_at: releaseTimestamp,\n        rubygems_version: rubygemsVersion,\n        ruby_version: rubyVersion,\n      }) => ({\n        version,\n        rubyPlatform,\n        releaseTimestamp,\n        rubygemsVersion,\n        rubyVersion,\n      })\n    );\n  }\n\n  return {\n    releases,\n    homepage: info.homepage_uri,\n    sourceUrl: info.source_code_uri,\n    changelogUrl: info.changelog_uri,\n  };\n}\n"]}